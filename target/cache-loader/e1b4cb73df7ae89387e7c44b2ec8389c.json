{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\conversion-factor-extended\\conversion-factor-extended.service.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\conversion-factor-extended\\conversion-factor-extended.service.ts","mtime":1625565386779},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar conversion_factor_1 = require(\"app/entities/conversion-factor\");\r\nvar ConversionFactorExtendedService = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ConversionFactorExtendedService, _super);\r\n    function ConversionFactorExtendedService(http) {\r\n        var _this = _super.call(this, http) || this;\r\n        _this.http = http;\r\n        _this.resourceExtendedUrl = app_constants_1.SERVER_API_URL + 'api/extended/conversion-factors';\r\n        return _this;\r\n    }\r\n    ConversionFactorExtendedService.prototype.create = function (conversionFactor) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(conversionFactor);\r\n        return this.http\r\n            .post(this.resourceExtendedUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    ConversionFactorExtendedService.prototype.update = function (conversionFactor) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(conversionFactor);\r\n        return this.http\r\n            .put(this.resourceExtendedUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    var _a;\r\n    ConversionFactorExtendedService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], ConversionFactorExtendedService);\r\n    return ConversionFactorExtendedService;\r\n}(conversion_factor_1.ConversionFactorService));\r\nexports.ConversionFactorExtendedService = ConversionFactorExtendedService;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\conversion-factor-extended\\conversion-factor-extended.service.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\conversion-factor-extended\\conversion-factor-extended.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAgE;AAIhE,4CAAqC;AAErC,mDAAmD;AAGnD,oEAAyE;AAMzE;IAAqD,2DAAuB;IAGxE,yCAAsB,IAAgB;QAAtC,YACI,kBAAM,IAAI,CAAC,SACd;QAFqB,UAAI,GAAJ,IAAI,CAAY;QAF/B,yBAAmB,GAAG,8BAAc,GAAG,iCAAiC,CAAC;;IAIhF,CAAC;IAED,gDAAM,GAAN,UAAO,gBAAmC;QAA1C,iBAKC;QAJG,IAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,IAAI;aACX,IAAI,CAAoB,IAAI,CAAC,mBAAmB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aAChF,IAAI,CAAC,eAAG,CAAC,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,gDAAM,GAAN,UAAO,gBAAmC;QAA1C,iBAKC;QAJG,IAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,IAAI;aACX,GAAG,CAAoB,IAAI,CAAC,mBAAmB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;aAC/E,IAAI,CAAC,eAAG,CAAC,UAAC,GAAuB,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IACjF,CAAC;;IAnBQ,+BAA+B;QAD3C,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAIH,iBAAU,oBAAV,iBAAU;OAH7B,+BAA+B,CAoB3C;IAAD,sCAAC;CAAA,AApBD,CAAqD,2CAAuB,GAoB3E;AApBY,0EAA+B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared';\r\nimport { IConversionFactor } from 'app/shared/model/conversion-factor.model';\r\nimport { ConversionFactorService } from 'app/entities/conversion-factor';\r\n\r\ntype EntityResponseType = HttpResponse<IConversionFactor>;\r\ntype EntityArrayResponseType = HttpResponse<IConversionFactor[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConversionFactorExtendedService extends ConversionFactorService {\r\n    public resourceExtendedUrl = SERVER_API_URL + 'api/extended/conversion-factors';\r\n\r\n    constructor(protected http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    create(conversionFactor: IConversionFactor): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(conversionFactor);\r\n        return this.http\r\n            .post<IConversionFactor>(this.resourceExtendedUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    update(conversionFactor: IConversionFactor): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(conversionFactor);\r\n        return this.http\r\n            .put<IConversionFactor>(this.resourceExtendedUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n}\r\n"]}]}