{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\blocks\\interceptor\\auth-expired.interceptor.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\blocks\\interceptor\\auth-expired.interceptor.ts","mtime":1625565386446},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar auth_session_service_1 = require(\"app/core/auth/auth-session.service\");\r\nvar login_modal_service_1 = require(\"app/core/login/login-modal.service\");\r\nvar state_storage_service_1 = require(\"app/core/auth/state-storage.service\");\r\nvar AuthExpiredInterceptor = /** @class */ (function () {\r\n    function AuthExpiredInterceptor(loginModalService, authServerProvider, stateStorageService) {\r\n        this.loginModalService = loginModalService;\r\n        this.authServerProvider = authServerProvider;\r\n        this.stateStorageService = stateStorageService;\r\n    }\r\n    AuthExpiredInterceptor.prototype.intercept = function (request, next) {\r\n        var _this = this;\r\n        return next.handle(request).pipe(operators_1.tap(function (event) { }, function (err) {\r\n            if (err instanceof http_1.HttpErrorResponse) {\r\n                if (err.status === 401 && err.url && !err.url.includes('/api/account')) {\r\n                    var destination = _this.stateStorageService.getDestinationState();\r\n                    if (destination !== null) {\r\n                        var to = destination.destination;\r\n                        var toParams = destination.params;\r\n                        if (to.name === 'accessdenied') {\r\n                            _this.stateStorageService.storePreviousState(to.name, toParams);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _this.stateStorageService.storeUrl('/');\r\n                    }\r\n                    _this.authServerProvider.logout();\r\n                    _this.loginModalService.open();\r\n                }\r\n            }\r\n        }));\r\n    };\r\n    var _a, _b, _c;\r\n    AuthExpiredInterceptor = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof login_modal_service_1.LoginModalService !== \"undefined\" && login_modal_service_1.LoginModalService) === \"function\" ? _a : Object, typeof (_b = typeof auth_session_service_1.AuthServerProvider !== \"undefined\" && auth_session_service_1.AuthServerProvider) === \"function\" ? _b : Object, typeof (_c = typeof state_storage_service_1.StateStorageService !== \"undefined\" && state_storage_service_1.StateStorageService) === \"function\" ? _c : Object])\r\n    ], AuthExpiredInterceptor);\r\n    return AuthExpiredInterceptor;\r\n}());\r\nexports.AuthExpiredInterceptor = AuthExpiredInterceptor;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\blocks\\interceptor\\auth-expired.interceptor.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\blocks\\interceptor\\auth-expired.interceptor.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAA+G;AAE/G,4CAAqC;AACrC,2EAAwE;AACxE,0EAAuE;AACvE,6EAA0E;AAG1E;IACI,gCACY,iBAAoC,EACpC,kBAAsC,EACtC,mBAAwC;QAFxC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,wBAAmB,GAAnB,mBAAmB,CAAqB;IACjD,CAAC;IAEJ,0CAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAAtD,iBAyBC;QAxBG,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC5B,eAAG,CACC,UAAC,KAAqB,IAAM,CAAC,EAC7B,UAAC,GAAQ;YACL,IAAI,GAAG,YAAY,wBAAiB,EAAE;gBAClC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;oBACpE,IAAM,WAAW,GAAG,KAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,CAAC;oBACnE,IAAI,WAAW,KAAK,IAAI,EAAE;wBACtB,IAAM,EAAE,GAAG,WAAW,CAAC,WAAW,CAAC;wBACnC,IAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC;wBACpC,IAAI,EAAE,CAAC,IAAI,KAAK,cAAc,EAAE;4BAC5B,KAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;yBAClE;qBACJ;yBAAM;wBACH,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;qBAC1C;oBAED,KAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;oBACjC,KAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;iBACjC;aACJ;QACL,CAAC,CACJ,CACJ,CAAC;IACN,CAAC;;IAhCQ,sBAAsB;QADlC,iBAAU,EAAE;qEAGsB,uCAAiB,oBAAjB,uCAAiB,oDAChB,yCAAkB,oBAAlB,yCAAkB,oDACjB,2CAAmB,oBAAnB,2CAAmB;OAJ3C,sBAAsB,CAiClC;IAAD,6BAAC;CAAA,AAjCD,IAiCC;AAjCY,wDAAsB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { AuthServerProvider } from 'app/core/auth/auth-session.service';\r\nimport { LoginModalService } from 'app/core/login/login-modal.service';\r\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\r\n\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        private loginModalService: LoginModalService,\r\n        private authServerProvider: AuthServerProvider,\r\n        private stateStorageService: StateStorageService\r\n    ) {}\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(\r\n            tap(\r\n                (event: HttpEvent<any>) => {},\r\n                (err: any) => {\r\n                    if (err instanceof HttpErrorResponse) {\r\n                        if (err.status === 401 && err.url && !err.url.includes('/api/account')) {\r\n                            const destination = this.stateStorageService.getDestinationState();\r\n                            if (destination !== null) {\r\n                                const to = destination.destination;\r\n                                const toParams = destination.params;\r\n                                if (to.name === 'accessdenied') {\r\n                                    this.stateStorageService.storePreviousState(to.name, toParams);\r\n                                }\r\n                            } else {\r\n                                this.stateStorageService.storeUrl('/');\r\n                            }\r\n\r\n                            this.authServerProvider.logout();\r\n                            this.loginModalService.open();\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        );\r\n    }\r\n}\r\n"]}]}