{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\creditor-ledger\\creditor-ledger.service.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\creditor-ledger\\creditor-ledger.service.ts","mtime":1625565386799},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar moment = require(\"moment\");\r\nvar input_constants_1 = require(\"app/shared/constants/input.constants\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar shared_1 = require(\"app/shared\");\r\nvar CreditorLedgerService = /** @class */ (function () {\r\n    function CreditorLedgerService(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/creditor-ledgers';\r\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/creditor-ledgers';\r\n    }\r\n    CreditorLedgerService.prototype.create = function (creditorLedger) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(creditorLedger);\r\n        return this.http\r\n            .post(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    CreditorLedgerService.prototype.update = function (creditorLedger) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(creditorLedger);\r\n        return this.http\r\n            .put(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    CreditorLedgerService.prototype.find = function (id) {\r\n        var _this = this;\r\n        return this.http\r\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    CreditorLedgerService.prototype.query = function (req) {\r\n        var _this = this;\r\n        var options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\r\n    };\r\n    CreditorLedgerService.prototype.delete = function (id) {\r\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\r\n    };\r\n    CreditorLedgerService.prototype.search = function (req) {\r\n        var _this = this;\r\n        var options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\r\n    };\r\n    CreditorLedgerService.prototype.convertDateFromClient = function (creditorLedger) {\r\n        var copy = Object.assign({}, creditorLedger, {\r\n            billDate: creditorLedger.billDate != null && creditorLedger.billDate.isValid() ? creditorLedger.billDate.format(input_constants_1.DATE_FORMAT) : null,\r\n            dueDate: creditorLedger.dueDate != null && creditorLedger.dueDate.isValid() ? creditorLedger.dueDate.format(input_constants_1.DATE_FORMAT) : null,\r\n            modifiedOn: creditorLedger.modifiedOn != null && creditorLedger.modifiedOn.isValid()\r\n                ? creditorLedger.modifiedOn.format(input_constants_1.DATE_FORMAT)\r\n                : null\r\n        });\r\n        return copy;\r\n    };\r\n    CreditorLedgerService.prototype.convertDateFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.billDate = res.body.billDate != null ? moment(res.body.billDate) : null;\r\n            res.body.dueDate = res.body.dueDate != null ? moment(res.body.dueDate) : null;\r\n            res.body.modifiedOn = res.body.modifiedOn != null ? moment(res.body.modifiedOn) : null;\r\n        }\r\n        return res;\r\n    };\r\n    CreditorLedgerService.prototype.convertDateArrayFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.forEach(function (creditorLedger) {\r\n                creditorLedger.billDate = creditorLedger.billDate != null ? moment(creditorLedger.billDate) : null;\r\n                creditorLedger.dueDate = creditorLedger.dueDate != null ? moment(creditorLedger.dueDate) : null;\r\n                creditorLedger.modifiedOn = creditorLedger.modifiedOn != null ? moment(creditorLedger.modifiedOn) : null;\r\n            });\r\n        }\r\n        return res;\r\n    };\r\n    var _a;\r\n    CreditorLedgerService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], CreditorLedgerService);\r\n    return CreditorLedgerService;\r\n}());\r\nexports.CreditorLedgerService = CreditorLedgerService;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\creditor-ledger\\creditor-ledger.service.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\creditor-ledger\\creditor-ledger.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared';\r\nimport { ICreditorLedger } from 'app/shared/model/creditor-ledger.model';\r\n\r\ntype EntityResponseType = HttpResponse<ICreditorLedger>;\r\ntype EntityArrayResponseType = HttpResponse<ICreditorLedger[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CreditorLedgerService {\r\n    public resourceUrl = SERVER_API_URL + 'api/creditor-ledgers';\r\n    public resourceSearchUrl = SERVER_API_URL + 'api/_search/creditor-ledgers';\r\n\r\n    constructor(protected http: HttpClient) {}\r\n\r\n    create(creditorLedger: ICreditorLedger): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(creditorLedger);\r\n        return this.http\r\n            .post<ICreditorLedger>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    update(creditorLedger: ICreditorLedger): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(creditorLedger);\r\n        return this.http\r\n            .put<ICreditorLedger>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    find(id: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<ICreditorLedger>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<ICreditorLedger[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n    }\r\n\r\n    delete(id: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n    }\r\n\r\n    search(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<ICreditorLedger[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n    }\r\n\r\n    protected convertDateFromClient(creditorLedger: ICreditorLedger): ICreditorLedger {\r\n        const copy: ICreditorLedger = Object.assign({}, creditorLedger, {\r\n            billDate:\r\n                creditorLedger.billDate != null && creditorLedger.billDate.isValid() ? creditorLedger.billDate.format(DATE_FORMAT) : null,\r\n            dueDate: creditorLedger.dueDate != null && creditorLedger.dueDate.isValid() ? creditorLedger.dueDate.format(DATE_FORMAT) : null,\r\n            modifiedOn:\r\n                creditorLedger.modifiedOn != null && creditorLedger.modifiedOn.isValid()\r\n                    ? creditorLedger.modifiedOn.format(DATE_FORMAT)\r\n                    : null\r\n        });\r\n        return copy;\r\n    }\r\n\r\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.billDate = res.body.billDate != null ? moment(res.body.billDate) : null;\r\n            res.body.dueDate = res.body.dueDate != null ? moment(res.body.dueDate) : null;\r\n            res.body.modifiedOn = res.body.modifiedOn != null ? moment(res.body.modifiedOn) : null;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((creditorLedger: ICreditorLedger) => {\r\n                creditorLedger.billDate = creditorLedger.billDate != null ? moment(creditorLedger.billDate) : null;\r\n                creditorLedger.dueDate = creditorLedger.dueDate != null ? moment(creditorLedger.dueDate) : null;\r\n                creditorLedger.modifiedOn = creditorLedger.modifiedOn != null ? moment(creditorLedger.modifiedOn) : null;\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"]}]}