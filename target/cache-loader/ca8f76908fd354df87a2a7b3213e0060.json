{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\core\\tracker\\tracker.service.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\core\\tracker\\tracker.service.ts","mtime":1625565386458},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar router_1 = require(\"@angular/router\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar csrf_service_1 = require(\"../auth/csrf.service\");\r\nvar window_service_1 = require(\"./window.service\");\r\nvar SockJS = require(\"sockjs-client\");\r\nvar Stomp = require(\"webstomp-client\");\r\nvar JhiTrackerService = /** @class */ (function () {\r\n    function JhiTrackerService(router, $window, \r\n    // tslint:disable-next-line: no-unused-variable\r\n    csrfService) {\r\n        this.router = router;\r\n        this.$window = $window;\r\n        this.csrfService = csrfService;\r\n        this.stompClient = null;\r\n        this.subscriber = null;\r\n        this.alreadyConnectedOnce = false;\r\n        this.connection = this.createConnection();\r\n        this.listener = this.createListener();\r\n    }\r\n    JhiTrackerService.prototype.connect = function () {\r\n        var _this = this;\r\n        if (this.connectedPromise === null) {\r\n            this.connection = this.createConnection();\r\n        }\r\n        // building absolute path so that websocket doesn't fail when deploying with a context path\r\n        var loc = this.$window.nativeWindow.location;\r\n        var url;\r\n        url = '//' + loc.host + loc.pathname + 'websocket/tracker';\r\n        var socket = new SockJS(url);\r\n        this.stompClient = Stomp.over(socket);\r\n        var headers = {};\r\n        headers['X-XSRF-TOKEN'] = this.csrfService.getCSRF('XSRF-TOKEN');\r\n        this.stompClient.connect(headers, function () {\r\n            _this.connectedPromise('success');\r\n            _this.connectedPromise = null;\r\n            _this.sendActivity();\r\n            if (!_this.alreadyConnectedOnce) {\r\n                _this.subscription = _this.router.events.subscribe(function (event) {\r\n                    if (event instanceof router_1.NavigationEnd) {\r\n                        _this.sendActivity();\r\n                    }\r\n                });\r\n                _this.alreadyConnectedOnce = true;\r\n            }\r\n        });\r\n    };\r\n    JhiTrackerService.prototype.disconnect = function () {\r\n        if (this.stompClient !== null) {\r\n            this.stompClient.disconnect();\r\n            this.stompClient = null;\r\n        }\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = null;\r\n        }\r\n        this.alreadyConnectedOnce = false;\r\n    };\r\n    JhiTrackerService.prototype.receive = function () {\r\n        return this.listener;\r\n    };\r\n    JhiTrackerService.prototype.sendActivity = function () {\r\n        if (this.stompClient !== null && this.stompClient.connected) {\r\n            this.stompClient.send('/topic/activity', // destination\r\n            JSON.stringify({ page: this.router.routerState.snapshot.url }), // body\r\n            {} // header\r\n            );\r\n        }\r\n    };\r\n    JhiTrackerService.prototype.subscribe = function () {\r\n        var _this = this;\r\n        this.connection.then(function () {\r\n            _this.subscriber = _this.stompClient.subscribe('/topic/tracker', function (data) {\r\n                _this.listenerObserver.next(JSON.parse(data.body));\r\n            });\r\n        });\r\n    };\r\n    JhiTrackerService.prototype.unsubscribe = function () {\r\n        if (this.subscriber !== null) {\r\n            this.subscriber.unsubscribe();\r\n        }\r\n        this.listener = this.createListener();\r\n    };\r\n    JhiTrackerService.prototype.createListener = function () {\r\n        var _this = this;\r\n        return new rxjs_1.Observable(function (observer) {\r\n            _this.listenerObserver = observer;\r\n        });\r\n    };\r\n    JhiTrackerService.prototype.createConnection = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) { return (_this.connectedPromise = resolve); });\r\n    };\r\n    var _a, _b, _c;\r\n    JhiTrackerService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _a : Object, typeof (_b = typeof window_service_1.WindowRef !== \"undefined\" && window_service_1.WindowRef) === \"function\" ? _b : Object, typeof (_c = typeof csrf_service_1.CSRFService !== \"undefined\" && csrf_service_1.CSRFService) === \"function\" ? _c : Object])\r\n    ], JhiTrackerService);\r\n    return JhiTrackerService;\r\n}());\r\nexports.JhiTrackerService = JhiTrackerService;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\core\\tracker\\tracker.service.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\core\\tracker\\tracker.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,0CAAwD;AACxD,6BAA0D;AAE1D,qDAAmD;AACnD,mDAA6C;AAE7C,sCAAwC;AACxC,uCAAyC;AAGzC;IAUI,2BACY,MAAc,EACd,OAAkB;IAC1B,+CAA+C;IACvC,WAAwB;QAHxB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAW;QAElB,gBAAW,GAAX,WAAW,CAAa;QAbpC,gBAAW,GAAG,IAAI,CAAC;QACnB,eAAU,GAAG,IAAI,CAAC;QAKlB,yBAAoB,GAAG,KAAK,CAAC;QASzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1C,CAAC;IAED,mCAAO,GAAP;QAAA,iBAyBC;QAxBG,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,EAAE;YAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC7C;QACD,2FAA2F;QAC3F,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC;QAC/C,IAAI,GAAG,CAAC;QACR,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,GAAG,mBAAmB,CAAC;QAC3D,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtC,IAAM,OAAO,GAAG,EAAE,CAAC;QACnB,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE;YAC9B,KAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YACjC,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,KAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,KAAI,CAAC,oBAAoB,EAAE;gBAC5B,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK;oBAClD,IAAI,KAAK,YAAY,sBAAa,EAAE;wBAChC,KAAI,CAAC,YAAY,EAAE,CAAC;qBACvB;gBACL,CAAC,CAAC,CAAC;gBACH,KAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;aACpC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAU,GAAV;QACI,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;YAC3B,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;YAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SAC3B;QACD,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC5B;QACD,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;IACtC,CAAC;IAED,mCAAO,GAAP;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,wCAAY,GAAZ;QACI,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE;YACzD,IAAI,CAAC,WAAW,CAAC,IAAI,CACjB,iBAAiB,EAAE,cAAc;YACjC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO;YACvE,EAAE,CAAC,SAAS;aACf,CAAC;SACL;IACL,CAAC;IAED,qCAAS,GAAT;QAAA,iBAMC;QALG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,UAAA,IAAI;gBAC/D,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,uCAAW,GAAX;QACI,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;YAC1B,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;SACjC;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1C,CAAC;IAEO,0CAAc,GAAtB;QAAA,iBAIC;QAHG,OAAO,IAAI,iBAAU,CAAC,UAAA,QAAQ;YAC1B,KAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,4CAAgB,GAAxB;QAAA,iBAEC;QADG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,IAAK,OAAA,CAAC,KAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,EAAjC,CAAiC,CAAC,CAAC;IAC/E,CAAC;;IAhGQ,iBAAiB;QAD7B,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAYX,eAAM,oBAAN,eAAM,oDACL,0BAAS,oBAAT,0BAAS,oDAEL,0BAAW,oBAAX,0BAAW;OAd3B,iBAAiB,CAiG7B;IAAD,wBAAC;CAAA,AAjGD,IAiGC;AAjGY,8CAAiB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { Observable, Observer, Subscription } from 'rxjs';\r\n\r\nimport { CSRFService } from '../auth/csrf.service';\r\nimport { WindowRef } from './window.service';\r\n\r\nimport * as SockJS from 'sockjs-client';\r\nimport * as Stomp from 'webstomp-client';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JhiTrackerService {\r\n    stompClient = null;\r\n    subscriber = null;\r\n    connection: Promise<any>;\r\n    connectedPromise: any;\r\n    listener: Observable<any>;\r\n    listenerObserver: Observer<any>;\r\n    alreadyConnectedOnce = false;\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private $window: WindowRef,\r\n        // tslint:disable-next-line: no-unused-variable\r\n        private csrfService: CSRFService\r\n    ) {\r\n        this.connection = this.createConnection();\r\n        this.listener = this.createListener();\r\n    }\r\n\r\n    connect() {\r\n        if (this.connectedPromise === null) {\r\n            this.connection = this.createConnection();\r\n        }\r\n        // building absolute path so that websocket doesn't fail when deploying with a context path\r\n        const loc = this.$window.nativeWindow.location;\r\n        let url;\r\n        url = '//' + loc.host + loc.pathname + 'websocket/tracker';\r\n        const socket = new SockJS(url);\r\n        this.stompClient = Stomp.over(socket);\r\n        const headers = {};\r\n        headers['X-XSRF-TOKEN'] = this.csrfService.getCSRF('XSRF-TOKEN');\r\n        this.stompClient.connect(headers, () => {\r\n            this.connectedPromise('success');\r\n            this.connectedPromise = null;\r\n            this.sendActivity();\r\n            if (!this.alreadyConnectedOnce) {\r\n                this.subscription = this.router.events.subscribe(event => {\r\n                    if (event instanceof NavigationEnd) {\r\n                        this.sendActivity();\r\n                    }\r\n                });\r\n                this.alreadyConnectedOnce = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    disconnect() {\r\n        if (this.stompClient !== null) {\r\n            this.stompClient.disconnect();\r\n            this.stompClient = null;\r\n        }\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = null;\r\n        }\r\n        this.alreadyConnectedOnce = false;\r\n    }\r\n\r\n    receive() {\r\n        return this.listener;\r\n    }\r\n\r\n    sendActivity() {\r\n        if (this.stompClient !== null && this.stompClient.connected) {\r\n            this.stompClient.send(\r\n                '/topic/activity', // destination\r\n                JSON.stringify({ page: this.router.routerState.snapshot.url }), // body\r\n                {} // header\r\n            );\r\n        }\r\n    }\r\n\r\n    subscribe() {\r\n        this.connection.then(() => {\r\n            this.subscriber = this.stompClient.subscribe('/topic/tracker', data => {\r\n                this.listenerObserver.next(JSON.parse(data.body));\r\n            });\r\n        });\r\n    }\r\n\r\n    unsubscribe() {\r\n        if (this.subscriber !== null) {\r\n            this.subscriber.unsubscribe();\r\n        }\r\n        this.listener = this.createListener();\r\n    }\r\n\r\n    private createListener(): Observable<any> {\r\n        return new Observable(observer => {\r\n            this.listenerObserver = observer;\r\n        });\r\n    }\r\n\r\n    private createConnection(): Promise<any> {\r\n        return new Promise((resolve, reject) => (this.connectedPromise = resolve));\r\n    }\r\n}\r\n"]}]}