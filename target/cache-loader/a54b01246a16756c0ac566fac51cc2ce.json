{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\shared\\login\\login-extended.component.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\shared\\login\\login-extended.component.ts","mtime":1625565388340},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar ng_jhipster_1 = require(\"ng-jhipster\");\r\nvar core_2 = require(\"app/core\");\r\nvar router_1 = require(\"@angular/router\");\r\nvar JhiLoginExtendedComponent = /** @class */ (function () {\r\n    function JhiLoginExtendedComponent(eventManager, loginService, stateStorageService, elementRef, renderer, router) {\r\n        this.eventManager = eventManager;\r\n        this.loginService = loginService;\r\n        this.stateStorageService = stateStorageService;\r\n        this.elementRef = elementRef;\r\n        this.renderer = renderer;\r\n        this.router = router;\r\n        this.credentials = {};\r\n    }\r\n    JhiLoginExtendedComponent.prototype.ngAfterViewInit = function () {\r\n        var _this = this;\r\n        setTimeout(function () { return _this.renderer.invokeElementMethod(_this.elementRef.nativeElement.querySelector('#username'), 'focus', []); }, 0);\r\n    };\r\n    JhiLoginExtendedComponent.prototype.cancel = function () {\r\n        this.credentials = {\r\n            username: null,\r\n            password: null,\r\n            rememberMe: true\r\n        };\r\n        this.authenticationError = false;\r\n    };\r\n    JhiLoginExtendedComponent.prototype.login = function () {\r\n        var _this = this;\r\n        this.loginService\r\n            .login({\r\n            username: this.username,\r\n            password: this.password,\r\n            rememberMe: this.rememberMe\r\n        })\r\n            .then(function () {\r\n            _this.authenticationError = false;\r\n            _this.router.navigate(['']);\r\n            /*\r\n            this.activeModal.dismiss('login success');\r\n            if (this.router.url === '/register' || /^\\/activate\\//.test(this.router.url) || /^\\/reset\\//.test(this.router.url)) {\r\n                this.router.navigate(['']);\r\n            }\r\n*/\r\n            _this.eventManager.broadcast({\r\n                name: 'authenticationSuccess',\r\n                content: 'Sending Authentication Success'\r\n            });\r\n            // previousState was set in the authExpiredInterceptor before being redirected to login modal.\r\n            // since login is successful, go to stored previousState and clear previousState\r\n            // location.reload();\r\n            var redirect = _this.stateStorageService.getUrl();\r\n            if (redirect) {\r\n                _this.stateStorageService.storeUrl(null);\r\n                _this.router.navigate([redirect]);\r\n            }\r\n        })\r\n            .catch(function () {\r\n            _this.authenticationError = true;\r\n        });\r\n    };\r\n    JhiLoginExtendedComponent.prototype.requestResetPassword = function () {\r\n        // this.activeModal.dismiss('to state requestReset');\r\n        this.router.navigate(['/reset', 'request']);\r\n    };\r\n    var _a, _b, _c, _d, _e, _f;\r\n    JhiLoginExtendedComponent = tslib_1.__decorate([\r\n        core_1.Component({\r\n            selector: 'jhi-login',\r\n            templateUrl: './login-extended.component.html'\r\n        }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiEventManager !== \"undefined\" && ng_jhipster_1.JhiEventManager) === \"function\" ? _a : Object, typeof (_b = typeof core_2.LoginService !== \"undefined\" && core_2.LoginService) === \"function\" ? _b : Object, typeof (_c = typeof core_2.StateStorageService !== \"undefined\" && core_2.StateStorageService) === \"function\" ? _c : Object, typeof (_d = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _d : Object, typeof (_e = typeof core_1.Renderer !== \"undefined\" && core_1.Renderer) === \"function\" ? _e : Object, typeof (_f = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _f : Object])\r\n    ], JhiLoginExtendedComponent);\r\n    return JhiLoginExtendedComponent;\r\n}());\r\nexports.JhiLoginExtendedComponent = JhiLoginExtendedComponent;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\shared\\login\\login-extended.component.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\shared\\login\\login-extended.component.ts"],"names":[],"mappings":";;;AAAA,sCAA+E;AAC/E,2CAA8C;AAC9C,iCAA6D;AAC7D,0CAAyC;AAQzC;IAOI,mCACW,YAA6B,EAC7B,YAA0B,EAC1B,mBAAwC,EACxC,UAAsB,EACtB,QAAkB,EAClB,MAAc;QALd,iBAAY,GAAZ,YAAY,CAAiB;QAC7B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,eAAU,GAAV,UAAU,CAAY;QACtB,aAAQ,GAAR,QAAQ,CAAU;QAClB,WAAM,GAAN,MAAM,CAAQ;QAErB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;IAED,mDAAe,GAAf;QAAA,iBAEC;QADG,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,KAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC,EAAxG,CAAwG,EAAE,CAAC,CAAC,CAAC;IAClI,CAAC;IAED,0CAAM,GAAN;QACI,IAAI,CAAC,WAAW,GAAG;YACf,QAAQ,EAAE,IAAI;YACd,QAAQ,EAAE,IAAI;YACd,UAAU,EAAE,IAAI;SACnB,CAAC;QACF,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;IACrC,CAAC;IAED,yCAAK,GAAL;QAAA,iBAmCC;QAlCG,IAAI,CAAC,YAAY;aACZ,KAAK,CAAC;YACH,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC;aACD,IAAI,CAAC;YACF,KAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;YACjC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAE3B;;;;;EAKd;YAEc,KAAI,CAAC,YAAY,CAAC,SAAS,CAAC;gBACxB,IAAI,EAAE,uBAAuB;gBAC7B,OAAO,EAAE,gCAAgC;aAC5C,CAAC,CAAC;YAEH,8FAA8F;YAC9F,gFAAgF;YAChF,qBAAqB;YACrB,IAAM,QAAQ,GAAG,KAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC;YACnD,IAAI,QAAQ,EAAE;gBACV,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACxC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;aACpC;QACL,CAAC,CAAC;aACD,KAAK,CAAC;YACH,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,CAAC,CAAC,CAAC;IACX,CAAC;IAED,wDAAoB,GAApB;QACI,qDAAqD;QACrD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;IAChD,CAAC;;IAvEQ,yBAAyB;QAJrC,gBAAS,CAAC;YACP,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,iCAAiC;SACjD,CAAC;qEAS2B,6BAAe,oBAAf,6BAAe,oDACf,mBAAY,oBAAZ,mBAAY,oDACL,0BAAmB,oBAAnB,0BAAmB,oDAC5B,iBAAU,oBAAV,iBAAU,oDACZ,eAAQ,oBAAR,eAAQ,oDACV,eAAM,oBAAN,eAAM;OAbhB,yBAAyB,CA6ErC;IAAD,gCAAC;CAAA,AA7ED,IA6EC;AA7EY,8DAAyB","sourcesContent":["import { AfterViewInit, Component, ElementRef, Renderer } from '@angular/core';\r\nimport { JhiEventManager } from 'ng-jhipster';\r\nimport { LoginService, StateStorageService } from 'app/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { JhiLoginModalComponent } from 'app/shared';\r\n\r\n@Component({\r\n    selector: 'jhi-login',\r\n    templateUrl: './login-extended.component.html'\r\n})\r\nexport class JhiLoginExtendedComponent implements AfterViewInit {\r\n    authenticationError: boolean;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    username: string;\r\n    credentials: any;\r\n\r\n    constructor(\r\n        public eventManager: JhiEventManager,\r\n        public loginService: LoginService,\r\n        public stateStorageService: StateStorageService,\r\n        public elementRef: ElementRef,\r\n        public renderer: Renderer,\r\n        public router: Router\r\n    ) {\r\n        this.credentials = {};\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector('#username'), 'focus', []), 0);\r\n    }\r\n\r\n    cancel() {\r\n        this.credentials = {\r\n            username: null,\r\n            password: null,\r\n            rememberMe: true\r\n        };\r\n        this.authenticationError = false;\r\n    }\r\n\r\n    login() {\r\n        this.loginService\r\n            .login({\r\n                username: this.username,\r\n                password: this.password,\r\n                rememberMe: this.rememberMe\r\n            })\r\n            .then(() => {\r\n                this.authenticationError = false;\r\n                this.router.navigate(['']);\r\n\r\n                /*\r\n                this.activeModal.dismiss('login success');\r\n                if (this.router.url === '/register' || /^\\/activate\\//.test(this.router.url) || /^\\/reset\\//.test(this.router.url)) {\r\n                    this.router.navigate(['']);\r\n                }\r\n*/\r\n\r\n                this.eventManager.broadcast({\r\n                    name: 'authenticationSuccess',\r\n                    content: 'Sending Authentication Success'\r\n                });\r\n\r\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\r\n                // since login is successful, go to stored previousState and clear previousState\r\n                // location.reload();\r\n                const redirect = this.stateStorageService.getUrl();\r\n                if (redirect) {\r\n                    this.stateStorageService.storeUrl(null);\r\n                    this.router.navigate([redirect]);\r\n                }\r\n            })\r\n            .catch(() => {\r\n                this.authenticationError = true;\r\n            });\r\n    }\r\n\r\n    requestResetPassword() {\r\n        // this.activeModal.dismiss('to state requestReset');\r\n        this.router.navigate(['/reset', 'request']);\r\n    }\r\n\r\n    /*register() {\r\n      this.activeModal.dismiss('to state register');\r\n      this.router.navigate(['/register']);\r\n    }*/\r\n}\r\n"]}]}