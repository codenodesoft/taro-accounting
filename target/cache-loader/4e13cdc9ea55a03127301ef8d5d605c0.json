{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\loan\\loan.service.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\loan\\loan.service.ts","mtime":1625565387240},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar moment = require(\"moment\");\r\nvar input_constants_1 = require(\"app/shared/constants/input.constants\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar shared_1 = require(\"app/shared\");\r\nvar LoanService = /** @class */ (function () {\r\n    function LoanService(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/loans';\r\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/loans';\r\n    }\r\n    LoanService.prototype.create = function (loan) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(loan);\r\n        return this.http\r\n            .post(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    LoanService.prototype.update = function (loan) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(loan);\r\n        return this.http\r\n            .put(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    LoanService.prototype.find = function (id) {\r\n        var _this = this;\r\n        return this.http\r\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    LoanService.prototype.query = function (req) {\r\n        var _this = this;\r\n        var options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\r\n    };\r\n    LoanService.prototype.delete = function (id) {\r\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\r\n    };\r\n    LoanService.prototype.search = function (req) {\r\n        var _this = this;\r\n        var options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\r\n    };\r\n    LoanService.prototype.convertDateFromClient = function (loan) {\r\n        var copy = Object.assign({}, loan, {\r\n            takenOn: loan.takenOn != null && loan.takenOn.isValid() ? loan.takenOn.format(input_constants_1.DATE_FORMAT) : null,\r\n            modifiedDate: loan.modifiedDate != null && loan.modifiedDate.isValid() ? loan.modifiedDate.format(input_constants_1.DATE_FORMAT) : null\r\n        });\r\n        return copy;\r\n    };\r\n    LoanService.prototype.convertDateFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.takenOn = res.body.takenOn != null ? moment(res.body.takenOn) : null;\r\n            res.body.modifiedDate = res.body.modifiedDate != null ? moment(res.body.modifiedDate) : null;\r\n        }\r\n        return res;\r\n    };\r\n    LoanService.prototype.convertDateArrayFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.forEach(function (loan) {\r\n                loan.takenOn = loan.takenOn != null ? moment(loan.takenOn) : null;\r\n                loan.modifiedDate = loan.modifiedDate != null ? moment(loan.modifiedDate) : null;\r\n            });\r\n        }\r\n        return res;\r\n    };\r\n    var _a;\r\n    LoanService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], LoanService);\r\n    return LoanService;\r\n}());\r\nexports.LoanService = LoanService;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\loan\\loan.service.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\loan\\loan.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared';\r\nimport { ILoan } from 'app/shared/model/loan.model';\r\n\r\ntype EntityResponseType = HttpResponse<ILoan>;\r\ntype EntityArrayResponseType = HttpResponse<ILoan[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LoanService {\r\n    public resourceUrl = SERVER_API_URL + 'api/loans';\r\n    public resourceSearchUrl = SERVER_API_URL + 'api/_search/loans';\r\n\r\n    constructor(protected http: HttpClient) {}\r\n\r\n    create(loan: ILoan): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(loan);\r\n        return this.http\r\n            .post<ILoan>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    update(loan: ILoan): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(loan);\r\n        return this.http\r\n            .put<ILoan>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    find(id: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<ILoan>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<ILoan[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n    }\r\n\r\n    delete(id: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n    }\r\n\r\n    search(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<ILoan[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n    }\r\n\r\n    protected convertDateFromClient(loan: ILoan): ILoan {\r\n        const copy: ILoan = Object.assign({}, loan, {\r\n            takenOn: loan.takenOn != null && loan.takenOn.isValid() ? loan.takenOn.format(DATE_FORMAT) : null,\r\n            modifiedDate: loan.modifiedDate != null && loan.modifiedDate.isValid() ? loan.modifiedDate.format(DATE_FORMAT) : null\r\n        });\r\n        return copy;\r\n    }\r\n\r\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.takenOn = res.body.takenOn != null ? moment(res.body.takenOn) : null;\r\n            res.body.modifiedDate = res.body.modifiedDate != null ? moment(res.body.modifiedDate) : null;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((loan: ILoan) => {\r\n                loan.takenOn = loan.takenOn != null ? moment(loan.takenOn) : null;\r\n                loan.modifiedDate = loan.modifiedDate != null ? moment(loan.modifiedDate) : null;\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"]}]}