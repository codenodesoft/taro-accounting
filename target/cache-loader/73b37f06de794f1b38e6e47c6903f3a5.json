{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\over-time-extended\\over-time-extended.component.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\over-time-extended\\over-time-extended.component.ts","mtime":1625565387341},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar router_1 = require(\"@angular/router\");\r\nvar ng_jhipster_1 = require(\"ng-jhipster\");\r\nvar core_2 = require(\"app/core\");\r\nvar over_time_extended_service_1 = require(\"./over-time-extended.service\");\r\nvar over_time_1 = require(\"app/entities/over-time\");\r\nvar moment = require(\"moment\");\r\nvar manager_1 = require(\"app/entities/manager\");\r\nvar shared_1 = require(\"app/shared\");\r\nvar employee_extended_1 = require(\"app/entities/employee-extended\");\r\nvar OverTimeExtendedComponent = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OverTimeExtendedComponent, _super);\r\n    function OverTimeExtendedComponent(overTimeExtendedService, jhiAlertService, eventManager, parseLinks, activatedRoute, accountService, managerService, employeeService) {\r\n        var _this = _super.call(this, overTimeExtendedService, jhiAlertService, eventManager, parseLinks, activatedRoute, accountService) || this;\r\n        _this.overTimeExtendedService = overTimeExtendedService;\r\n        _this.jhiAlertService = jhiAlertService;\r\n        _this.eventManager = eventManager;\r\n        _this.parseLinks = parseLinks;\r\n        _this.activatedRoute = activatedRoute;\r\n        _this.accountService = accountService;\r\n        _this.managerService = managerService;\r\n        _this.employeeService = employeeService;\r\n        _this.days = shared_1.DAYS;\r\n        _this.months = shared_1.MONTHS;\r\n        _this.years = shared_1.YEARS();\r\n        _this.fromDate = { day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() };\r\n        _this.toDate = { day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() };\r\n        return _this;\r\n    }\r\n    OverTimeExtendedComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.loadAll();\r\n        this.accountService.identity().then(function (account) {\r\n            _this.currentAccount = account;\r\n            _this.employeeService\r\n                .query()\r\n                .subscribe(function (res) { return _this.addEmployees(res.body); }, function (res) { return _this.onError(res.message); });\r\n        });\r\n        this.registerChangeInOverTimes();\r\n    };\r\n    OverTimeExtendedComponent.prototype.loadAll = function () {\r\n        var _this = this;\r\n        if (this.fromDate.day &&\r\n            this.fromDate.month &&\r\n            this.fromDate.year &&\r\n            this.toDate.day &&\r\n            this.toDate.month &&\r\n            this.toDate.year &&\r\n            this.employee) {\r\n            var from = moment(new Date(this.fromDate.month + \"-\" + this.fromDate.day + \"-\" + this.fromDate.year));\r\n            var to = moment(new Date(this.toDate.month + \"-\" + this.toDate.day + \"-\" + this.toDate.year));\r\n            if (from.isBefore(to.add(1))) {\r\n                this.overTimeExtendedService\r\n                    .query({\r\n                    page: this.page,\r\n                    size: this.itemsPerPage,\r\n                    sort: this.sort(),\r\n                    'employeeId.equals': this.employee.id,\r\n                    'overTimeDate.greaterOrEqualThan': moment(new Date(this.fromDate.month + \"-\" + this.fromDate.day + \"-\" + this.fromDate.year)).format(shared_1.DATE_FORMAT),\r\n                    'overTimeDate.lessOrEqualThan': moment(new Date(this.toDate.month + \"-\" + this.toDate.day + \"-\" + this.toDate.year)).format(shared_1.DATE_FORMAT)\r\n                })\r\n                    .subscribe(function (res) { return _this.paginateOverTimes(res.body, res.headers); }, function (res) { return _this.onError(res.message); });\r\n            }\r\n            else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        }\r\n        else if (this.fromDate.day &&\r\n            this.fromDate.month &&\r\n            this.fromDate.year &&\r\n            this.toDate.day &&\r\n            this.toDate.month &&\r\n            this.toDate.year) {\r\n            var from = moment(new Date(this.fromDate.month + \"-\" + this.fromDate.day + \"-\" + this.fromDate.year));\r\n            var to = moment(new Date(this.toDate.month + \"-\" + this.toDate.day + \"-\" + this.toDate.year));\r\n            if (from.isBefore(to.add(1))) {\r\n                this.overTimeExtendedService\r\n                    .query({\r\n                    page: this.page,\r\n                    size: this.itemsPerPage,\r\n                    sort: this.sort(),\r\n                    'overTimeDate.greaterOrEqualThan': moment(new Date(this.fromDate.month + \"-\" + this.fromDate.day + \"-\" + this.fromDate.year)).format(shared_1.DATE_FORMAT),\r\n                    'overTimeDate.lessOrEqualThan': moment(new Date(this.toDate.month + \"-\" + this.toDate.day + \"-\" + this.toDate.year)).format(shared_1.DATE_FORMAT)\r\n                })\r\n                    .subscribe(function (res) { return _this.paginateOverTimes(res.body, res.headers); }, function (res) { return _this.onError(res.message); });\r\n            }\r\n            else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        }\r\n        else if (this.employee) {\r\n            this.overTimeExtendedService\r\n                .query({\r\n                page: this.page,\r\n                size: this.itemsPerPage,\r\n                sort: this.sort(),\r\n                'employeeId.equals': this.employee.id\r\n            })\r\n                .subscribe(function (res) { return _this.paginateOverTimes(res.body, res.headers); }, function (res) { return _this.onError(res.message); });\r\n        }\r\n        else {\r\n            this.onError('Invalid input');\r\n        }\r\n    };\r\n    OverTimeExtendedComponent.prototype.addEmployees = function (data) {\r\n        this.employees = [];\r\n        this.employees = data;\r\n    };\r\n    OverTimeExtendedComponent.prototype.search = function (query) {\r\n        if (!query) {\r\n            return this.clear();\r\n        }\r\n        this.overTimes = [];\r\n        this.links = {\r\n            last: 0\r\n        };\r\n        this.page = 0;\r\n        this.predicate = 'id';\r\n        this.reverse = false;\r\n        this.currentSearch = query;\r\n        this.loadAll();\r\n    };\r\n    OverTimeExtendedComponent.prototype.trackDayId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    OverTimeExtendedComponent.prototype.trackMonthId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    OverTimeExtendedComponent.prototype.trackYearId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    OverTimeExtendedComponent.prototype.generateReport = function () {\r\n        if (this.fromDate.day &&\r\n            this.fromDate.month &&\r\n            this.fromDate.year &&\r\n            this.toDate.day &&\r\n            this.toDate.month &&\r\n            this.toDate.year &&\r\n            this.employee) {\r\n            var from = moment(new Date(this.fromDate.month + \"-\" + this.fromDate.day + \"-\" + this.fromDate.year));\r\n            var to = moment(new Date(this.toDate.month + \"-\" + this.toDate.day + \"-\" + this.toDate.year));\r\n            if (from.isBefore(to.add(1))) {\r\n                this.overTimeExtendedService.generateReportByFromDateAndToDateAndEmployeeId(from, to, this.employee.employeeId);\r\n            }\r\n            else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        }\r\n        else if (this.fromDate.day &&\r\n            this.fromDate.month &&\r\n            this.fromDate.year &&\r\n            this.toDate.day &&\r\n            this.toDate.month &&\r\n            this.toDate.year) {\r\n            var from = moment(new Date(this.fromDate.month + \"-\" + this.fromDate.day + \"-\" + this.fromDate.year));\r\n            var to = moment(new Date(this.toDate.month + \"-\" + this.toDate.day + \"-\" + this.toDate.year));\r\n            if (from.isBefore(to.add(1))) {\r\n                this.overTimeExtendedService.generateReportByFromDateAndToDate(from, to);\r\n            }\r\n            else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        }\r\n        else if (this.employee) {\r\n            this.overTimeExtendedService.generateReportByEmployeeId(this.employee.employeeId);\r\n        }\r\n        else {\r\n            this.onError('Invalid input');\r\n        }\r\n    };\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    OverTimeExtendedComponent = tslib_1.__decorate([\r\n        core_1.Component({\r\n            selector: 'jhi-over-time-extended',\r\n            templateUrl: './over-time-extended.component.html'\r\n        }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof over_time_extended_service_1.OverTimeExtendedService !== \"undefined\" && over_time_extended_service_1.OverTimeExtendedService) === \"function\" ? _a : Object, typeof (_b = typeof ng_jhipster_1.JhiAlertService !== \"undefined\" && ng_jhipster_1.JhiAlertService) === \"function\" ? _b : Object, typeof (_c = typeof ng_jhipster_1.JhiEventManager !== \"undefined\" && ng_jhipster_1.JhiEventManager) === \"function\" ? _c : Object, typeof (_d = typeof ng_jhipster_1.JhiParseLinks !== \"undefined\" && ng_jhipster_1.JhiParseLinks) === \"function\" ? _d : Object, typeof (_e = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" ? _e : Object, typeof (_f = typeof core_2.AccountService !== \"undefined\" && core_2.AccountService) === \"function\" ? _f : Object, typeof (_g = typeof manager_1.ManagerService !== \"undefined\" && manager_1.ManagerService) === \"function\" ? _g : Object, typeof (_h = typeof employee_extended_1.EmployeeExtendedService !== \"undefined\" && employee_extended_1.EmployeeExtendedService) === \"function\" ? _h : Object])\r\n    ], OverTimeExtendedComponent);\r\n    return OverTimeExtendedComponent;\r\n}(over_time_1.OverTimeComponent));\r\nexports.OverTimeExtendedComponent = OverTimeExtendedComponent;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\over-time-extended\\over-time-extended.component.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\over-time-extended\\over-time-extended.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { JhiAlertService, JhiEventManager, JhiParseLinks } from 'ng-jhipster';\r\nimport { Account, AccountService } from 'app/core';\r\nimport { OverTimeExtendedService } from './over-time-extended.service';\r\nimport { OverTimeComponent } from 'app/entities/over-time';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { IOverTime } from 'app/shared/model/over-time.model';\r\nimport * as moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { IEmployee } from 'app/shared/model/employee.model';\r\nimport { IManager } from 'app/shared/model/manager.model';\r\nimport { ManagerService } from 'app/entities/manager';\r\nimport { DATE_FORMAT, DAYS, MONTHS, YEARS } from 'app/shared';\r\nimport { IConstantsModel } from 'app/shared/model/constants-model';\r\nimport { EmployeeExtendedService } from 'app/entities/employee-extended';\r\n\r\n@Component({\r\n    selector: 'jhi-over-time-extended',\r\n    templateUrl: './over-time-extended.component.html'\r\n})\r\nexport class OverTimeExtendedComponent extends OverTimeComponent {\r\n    distinctDates: Moment[];\r\n    currentAccount: Account;\r\n    currentEmployee: IEmployee;\r\n    employeesUnderSupervisor: IManager[];\r\n    employees: IEmployee[];\r\n    employee: IEmployee;\r\n    distinctDate: Moment;\r\n\r\n    days: IConstantsModel[] = DAYS;\r\n    months: IConstantsModel[] = MONTHS;\r\n    years: IConstantsModel[] = YEARS();\r\n\r\n    fromDate: {\r\n        day: number;\r\n        month: number;\r\n        year: number;\r\n    } = { day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() };\r\n\r\n    toDate: {\r\n        day: number;\r\n        month: number;\r\n        year: number;\r\n    } = { day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() };\r\n\r\n    constructor(\r\n        protected overTimeExtendedService: OverTimeExtendedService,\r\n        protected jhiAlertService: JhiAlertService,\r\n        protected eventManager: JhiEventManager,\r\n        protected parseLinks: JhiParseLinks,\r\n        protected activatedRoute: ActivatedRoute,\r\n        protected accountService: AccountService,\r\n        protected managerService: ManagerService,\r\n        protected employeeService: EmployeeExtendedService\r\n    ) {\r\n        super(overTimeExtendedService, jhiAlertService, eventManager, parseLinks, activatedRoute, accountService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loadAll();\r\n        this.accountService.identity().then(account => {\r\n            this.currentAccount = account;\r\n            this.employeeService\r\n                .query()\r\n                .subscribe(\r\n                    (res: HttpResponse<IEmployee[]>) => this.addEmployees(res.body),\r\n                    (res: HttpErrorResponse) => this.onError(res.message)\r\n                );\r\n        });\r\n        this.registerChangeInOverTimes();\r\n    }\r\n\r\n    loadAll() {\r\n        if (\r\n            this.fromDate.day &&\r\n            this.fromDate.month &&\r\n            this.fromDate.year &&\r\n            this.toDate.day &&\r\n            this.toDate.month &&\r\n            this.toDate.year &&\r\n            this.employee\r\n        ) {\r\n            let from = moment(new Date(`${this.fromDate.month}-${this.fromDate.day}-${this.fromDate.year}`));\r\n            let to = moment(new Date(`${this.toDate.month}-${this.toDate.day}-${this.toDate.year}`));\r\n\r\n            if (from.isBefore(to.add(1))) {\r\n                this.overTimeExtendedService\r\n                    .query({\r\n                        page: this.page,\r\n                        size: this.itemsPerPage,\r\n                        sort: this.sort(),\r\n                        'employeeId.equals': this.employee.id,\r\n                        'overTimeDate.greaterOrEqualThan': moment(\r\n                            new Date(`${this.fromDate.month}-${this.fromDate.day}-${this.fromDate.year}`)\r\n                        ).format(DATE_FORMAT),\r\n                        'overTimeDate.lessOrEqualThan': moment(\r\n                            new Date(`${this.toDate.month}-${this.toDate.day}-${this.toDate.year}`)\r\n                        ).format(DATE_FORMAT)\r\n                    })\r\n                    .subscribe(\r\n                        (res: HttpResponse<IOverTime[]>) => this.paginateOverTimes(res.body, res.headers),\r\n                        (res: HttpErrorResponse) => this.onError(res.message)\r\n                    );\r\n            } else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        } else if (\r\n            this.fromDate.day &&\r\n            this.fromDate.month &&\r\n            this.fromDate.year &&\r\n            this.toDate.day &&\r\n            this.toDate.month &&\r\n            this.toDate.year\r\n        ) {\r\n            let from = moment(new Date(`${this.fromDate.month}-${this.fromDate.day}-${this.fromDate.year}`));\r\n            let to = moment(new Date(`${this.toDate.month}-${this.toDate.day}-${this.toDate.year}`));\r\n\r\n            if (from.isBefore(to.add(1))) {\r\n                this.overTimeExtendedService\r\n                    .query({\r\n                        page: this.page,\r\n                        size: this.itemsPerPage,\r\n                        sort: this.sort(),\r\n                        'overTimeDate.greaterOrEqualThan': moment(\r\n                            new Date(`${this.fromDate.month}-${this.fromDate.day}-${this.fromDate.year}`)\r\n                        ).format(DATE_FORMAT),\r\n                        'overTimeDate.lessOrEqualThan': moment(\r\n                            new Date(`${this.toDate.month}-${this.toDate.day}-${this.toDate.year}`)\r\n                        ).format(DATE_FORMAT)\r\n                    })\r\n                    .subscribe(\r\n                        (res: HttpResponse<IOverTime[]>) => this.paginateOverTimes(res.body, res.headers),\r\n                        (res: HttpErrorResponse) => this.onError(res.message)\r\n                    );\r\n            } else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        } else if (this.employee) {\r\n            this.overTimeExtendedService\r\n                .query({\r\n                    page: this.page,\r\n                    size: this.itemsPerPage,\r\n                    sort: this.sort(),\r\n                    'employeeId.equals': this.employee.id\r\n                })\r\n                .subscribe(\r\n                    (res: HttpResponse<IOverTime[]>) => this.paginateOverTimes(res.body, res.headers),\r\n                    (res: HttpErrorResponse) => this.onError(res.message)\r\n                );\r\n        } else {\r\n            this.onError('Invalid input');\r\n        }\r\n    }\r\n\r\n    protected addEmployees(data: IEmployee[]) {\r\n        this.employees = [];\r\n        this.employees = data;\r\n    }\r\n\r\n    search(query) {\r\n        if (!query) {\r\n            return this.clear();\r\n        }\r\n        this.overTimes = [];\r\n        this.links = {\r\n            last: 0\r\n        };\r\n        this.page = 0;\r\n        this.predicate = 'id';\r\n        this.reverse = false;\r\n        this.currentSearch = query;\r\n        this.loadAll();\r\n    }\r\n\r\n    trackDayId(index: number, item: IConstantsModel) {\r\n        return item.id;\r\n    }\r\n\r\n    trackMonthId(index: number, item: IConstantsModel) {\r\n        return item.id;\r\n    }\r\n\r\n    trackYearId(index: number, item: IConstantsModel) {\r\n        return item.id;\r\n    }\r\n\r\n    generateReport() {\r\n        if (\r\n            this.fromDate.day &&\r\n            this.fromDate.month &&\r\n            this.fromDate.year &&\r\n            this.toDate.day &&\r\n            this.toDate.month &&\r\n            this.toDate.year &&\r\n            this.employee\r\n        ) {\r\n            let from = moment(new Date(`${this.fromDate.month}-${this.fromDate.day}-${this.fromDate.year}`));\r\n            let to = moment(new Date(`${this.toDate.month}-${this.toDate.day}-${this.toDate.year}`));\r\n\r\n            if (from.isBefore(to.add(1))) {\r\n                this.overTimeExtendedService.generateReportByFromDateAndToDateAndEmployeeId(from, to, this.employee.employeeId);\r\n            } else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        } else if (\r\n            this.fromDate.day &&\r\n            this.fromDate.month &&\r\n            this.fromDate.year &&\r\n            this.toDate.day &&\r\n            this.toDate.month &&\r\n            this.toDate.year\r\n        ) {\r\n            let from = moment(new Date(`${this.fromDate.month}-${this.fromDate.day}-${this.fromDate.year}`));\r\n            let to = moment(new Date(`${this.toDate.month}-${this.toDate.day}-${this.toDate.year}`));\r\n\r\n            if (from.isBefore(to.add(1))) {\r\n                this.overTimeExtendedService.generateReportByFromDateAndToDate(from, to);\r\n            } else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        } else if (this.employee) {\r\n            this.overTimeExtendedService.generateReportByEmployeeId(this.employee.employeeId);\r\n        } else {\r\n            this.onError('Invalid input');\r\n        }\r\n    }\r\n}\r\n"]}]}