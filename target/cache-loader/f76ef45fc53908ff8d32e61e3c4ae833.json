{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\dt-transaction-extended\\dt-transaction-extended.service.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\dt-transaction-extended\\dt-transaction-extended.service.ts","mtime":1625565386931},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar moment = require(\"moment\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar dt_transaction_1 = require(\"app/entities/dt-transaction\");\r\nvar SoptorshiUtil_1 = require(\"app/shared/util/SoptorshiUtil\");\r\nvar GeneralLedgerFetchType;\r\n(function (GeneralLedgerFetchType) {\r\n    GeneralLedgerFetchType[\"ALL\"] = \"ALL\";\r\n    GeneralLedgerFetchType[\"TRANSACTION_SPECIFIC\"] = \"TRANSACTION_SPECIFIC\";\r\n    GeneralLedgerFetchType[\"ACCOUNT_SPECIFIC\"] = \"ACCOUNT_SPECIFIC\";\r\n})(GeneralLedgerFetchType = exports.GeneralLedgerFetchType || (exports.GeneralLedgerFetchType = {}));\r\nvar DtTransactionExtendedService = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DtTransactionExtendedService, _super);\r\n    function DtTransactionExtendedService(http) {\r\n        var _this = _super.call(this, http) || this;\r\n        _this.http = http;\r\n        _this.resourceUrlExtended = app_constants_1.SERVER_API_URL + 'api/extended/dt-transactions';\r\n        return _this;\r\n    }\r\n    DtTransactionExtendedService.prototype.create = function (dtTransaction) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(dtTransaction);\r\n        return this.http\r\n            .post(this.resourceUrlExtended, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    DtTransactionExtendedService.prototype.update = function (dtTransaction) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(dtTransaction);\r\n        return this.http\r\n            .put(this.resourceUrlExtended, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    DtTransactionExtendedService.prototype.downloadVoucherReport = function (voucherName, voucherNo, voucherDate) {\r\n        var voucherDateStr = moment(voucherDate).format('YYYY-MM-DD');\r\n        return this.http\r\n            .get(this.resourceUrlExtended + \"/voucher-report/\" + voucherName + \"/\" + voucherNo + \"/\" + voucherDateStr, { responseType: 'blob' })\r\n            .subscribe(function (data) {\r\n            SoptorshiUtil_1.SoptorshiUtil.writeFileContent(data, 'application/pdf', voucherName);\r\n        });\r\n    };\r\n    DtTransactionExtendedService.prototype.downloadGeneralLedgerReport = function (generalLedgerFetchType, accountId, fromDate, toDate) {\r\n        var fromDateStr = moment(fromDate).format('YYYY-MM-DD');\r\n        var toDateStr = moment(toDate).format('YYYY-MM-DD');\r\n        return this.http\r\n            .get(this.resourceUrlExtended + \"/general-ledger-report/\" + generalLedgerFetchType + \"/\" + accountId + \"/\" + fromDateStr + \"/\" + toDateStr, {\r\n            responseType: 'blob'\r\n        })\r\n            .subscribe(function (data) {\r\n            SoptorshiUtil_1.SoptorshiUtil.writeFileContent(data, 'application/pdf', 'General Ledger Report');\r\n        });\r\n    };\r\n    var _a;\r\n    DtTransactionExtendedService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], DtTransactionExtendedService);\r\n    return DtTransactionExtendedService;\r\n}(dt_transaction_1.DtTransactionService));\r\nexports.DtTransactionExtendedService = DtTransactionExtendedService;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\dt-transaction-extended\\dt-transaction-extended.service.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\dt-transaction-extended\\dt-transaction-extended.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared';\r\nimport { IDtTransaction } from 'app/shared/model/dt-transaction.model';\r\nimport { DtTransactionService } from 'app/entities/dt-transaction';\r\nimport { SoptorshiUtil } from 'app/shared/util/SoptorshiUtil';\r\n\r\ntype EntityResponseType = HttpResponse<IDtTransaction>;\r\ntype EntityArrayResponseType = HttpResponse<IDtTransaction[]>;\r\n\r\nexport enum GeneralLedgerFetchType {\r\n    ALL = 'ALL',\r\n    TRANSACTION_SPECIFIC = 'TRANSACTION_SPECIFIC',\r\n    ACCOUNT_SPECIFIC = 'ACCOUNT_SPECIFIC'\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DtTransactionExtendedService extends DtTransactionService {\r\n    public resourceUrlExtended = SERVER_API_URL + 'api/extended/dt-transactions';\r\n\r\n    constructor(protected http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    create(dtTransaction: IDtTransaction): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(dtTransaction);\r\n        return this.http\r\n            .post<IDtTransaction>(this.resourceUrlExtended, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    update(dtTransaction: IDtTransaction): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(dtTransaction);\r\n        return this.http\r\n            .put<IDtTransaction>(this.resourceUrlExtended, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    downloadVoucherReport(voucherName: string, voucherNo: string, voucherDate: any) {\r\n        const voucherDateStr = moment(voucherDate).format('YYYY-MM-DD');\r\n        return this.http\r\n            .get(`${this.resourceUrlExtended}/voucher-report/${voucherName}/${voucherNo}/${voucherDateStr}`, { responseType: 'blob' })\r\n            .subscribe((data: any) => {\r\n                SoptorshiUtil.writeFileContent(data, 'application/pdf', voucherName);\r\n            });\r\n    }\r\n\r\n    downloadGeneralLedgerReport(generalLedgerFetchType: GeneralLedgerFetchType, accountId: number, fromDate: any, toDate: any) {\r\n        const fromDateStr = moment(fromDate).format('YYYY-MM-DD');\r\n        const toDateStr = moment(toDate).format('YYYY-MM-DD');\r\n        return this.http\r\n            .get(`${this.resourceUrlExtended}/general-ledger-report/${generalLedgerFetchType}/${accountId}/${fromDateStr}/${toDateStr}`, {\r\n                responseType: 'blob'\r\n            })\r\n            .subscribe((data: any) => {\r\n                SoptorshiUtil.writeFileContent(data, 'application/pdf', 'General Ledger Report');\r\n            });\r\n    }\r\n}\r\n"]}]}