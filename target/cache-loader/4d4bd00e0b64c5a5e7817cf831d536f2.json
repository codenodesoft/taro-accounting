{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\leave-balance\\others-leave-balance.component.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\leave-balance\\others-leave-balance.component.ts","mtime":1625565387202},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar core_2 = require(\"app/core\");\r\nvar leave_balance_service_1 = require(\"app/entities/leave-balance/leave-balance.service\");\r\nvar employee_1 = require(\"app/entities/employee\");\r\nvar ng_jhipster_1 = require(\"ng-jhipster\");\r\nvar router_1 = require(\"@angular/router\");\r\nvar manager_1 = require(\"app/entities/manager\");\r\nvar shared_1 = require(\"app/shared\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar OthersLeaveBalanceComponent = /** @class */ (function () {\r\n    function OthersLeaveBalanceComponent(leaveBalanceService, employeeService, jhiAlertService, eventManager, parseLinks, activatedRoute, accountService, managerService) {\r\n        this.leaveBalanceService = leaveBalanceService;\r\n        this.employeeService = employeeService;\r\n        this.jhiAlertService = jhiAlertService;\r\n        this.eventManager = eventManager;\r\n        this.parseLinks = parseLinks;\r\n        this.activatedRoute = activatedRoute;\r\n        this.accountService = accountService;\r\n        this.managerService = managerService;\r\n        this.years = shared_1.YEARS();\r\n        this.fromDate = { year: new Date().getFullYear() };\r\n        this.leaveBalances = [];\r\n    }\r\n    OthersLeaveBalanceComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.leaveBalances = [];\r\n        this.accountService.identity().then(function (account) {\r\n            _this.currentAccount = account;\r\n            if (_this.accountService.hasAnyAuthority(['ROLE_ADMIN']) || _this.accountService.hasAnyAuthority(['ROLE_LEAVE_ADMIN'])) {\r\n                _this.employeeService\r\n                    .query()\r\n                    .pipe(operators_1.filter(function (mayBeOk) { return mayBeOk.ok; }), operators_1.map(function (response) { return response.body; }))\r\n                    .subscribe(function (res) { return (_this.employees = res); }, function (res) { return _this.onError(res.message); });\r\n            }\r\n            else {\r\n                _this.employeeService\r\n                    .query({\r\n                    'employeeId.equals': _this.currentAccount.login\r\n                })\r\n                    .subscribe(function (res) {\r\n                    _this.currentEmployee = res.body[0];\r\n                    _this.managerService\r\n                        .query({\r\n                        'employeeId.equals': _this.currentEmployee.id\r\n                    })\r\n                        .subscribe(function (res) {\r\n                        _this.employeesUnderSupervisor = res.body;\r\n                        var map = _this.employeesUnderSupervisor.map(function (val) { return val.parentEmployeeId; }).join(',');\r\n                        _this.employeeService\r\n                            .query({\r\n                            'id.in': [map]\r\n                        })\r\n                            .subscribe(function (res) { return (_this.employees = res.body); }, function (res) { return _this.onError(res.message); });\r\n                    }, function (res) { return _this.onError(res.message); });\r\n                }, function (res) { return _this.onError(res.message); });\r\n            }\r\n        });\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.search = function () {\r\n        var _this = this;\r\n        if (this.accountService.hasAnyAuthority(['ROLE_ADMIN']) || this.accountService.hasAnyAuthority(['ROLE_LEAVE_ADMIN'])) {\r\n            if (this.fromDate.year && this.employee) {\r\n                this.getLeaveBalance(this.employee.employeeId, this.fromDate.year);\r\n            }\r\n            else {\r\n                this.onError('Invalid input');\r\n            }\r\n        }\r\n        else {\r\n            if (this.fromDate.year && this.employee) {\r\n                this.employeeService\r\n                    .query({\r\n                    'employeeId.equals': this.employee.employeeId\r\n                })\r\n                    .subscribe(function (res) {\r\n                    _this.currentEmployee = res.body[0];\r\n                    _this.managerService\r\n                        .query({\r\n                        'parentEmployeeId.equals': _this.currentEmployee.id\r\n                    })\r\n                        .subscribe(function (response) {\r\n                        _this.getLeaveBalance(_this.currentEmployee.employeeId, _this.fromDate.year);\r\n                    }, function (response) { return _this.onError(response.message); });\r\n                }, function (res) { return _this.onError(res.message); });\r\n            }\r\n            else {\r\n                this.onError('Invalid input');\r\n            }\r\n        }\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.clear = function () {\r\n        this.currentSearch = '';\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.getLeaveBalance = function (employeeId, year) {\r\n        var _this = this;\r\n        this.leaveBalanceService\r\n            .find(employeeId, year)\r\n            .subscribe(function (res) { return _this.constructLeaveBalance(res.body, res.headers); }, function (res) { return _this.onError(res.message); });\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.constructLeaveBalance = function (data, headers) {\r\n        this.leaveBalances = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n            this.leaveBalances.push(data[i]);\r\n        }\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.trackId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.onError = function (errorMessage) {\r\n        this.jhiAlertService.error(errorMessage, null, null);\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.trackEmployeeById = function (index, item) {\r\n        return item.id;\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.trackYearId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    OthersLeaveBalanceComponent.prototype.generateReport = function () {\r\n        if (this.fromDate.year && this.employee) {\r\n            this.leaveBalanceService.generateReportByFromDateAndToDateAndEmployeeId(this.fromDate.year, this.employee.employeeId);\r\n        }\r\n        else if (this.fromDate.year) {\r\n            if (this.accountService.hasAnyAuthority(['ROLE_ADMIN', 'ROLE_LEAVE_ADMIN'])) {\r\n                this.leaveBalanceService.generateReportByFromDateAndToDate(this.fromDate.year);\r\n            }\r\n            else {\r\n                this.onError('Please fill up all the required information');\r\n            }\r\n        }\r\n        else {\r\n            this.onError('Invalid input');\r\n        }\r\n    };\r\n    var _a, _b, _c, _d, _e, _f, _g, _h;\r\n    OthersLeaveBalanceComponent = tslib_1.__decorate([\r\n        core_1.Component({\r\n            selector: 'jhi-others-leave-balance',\r\n            templateUrl: './others-leave-balance.component.html',\r\n            styles: []\r\n        }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof leave_balance_service_1.LeaveBalanceService !== \"undefined\" && leave_balance_service_1.LeaveBalanceService) === \"function\" ? _a : Object, typeof (_b = typeof employee_1.EmployeeService !== \"undefined\" && employee_1.EmployeeService) === \"function\" ? _b : Object, typeof (_c = typeof ng_jhipster_1.JhiAlertService !== \"undefined\" && ng_jhipster_1.JhiAlertService) === \"function\" ? _c : Object, typeof (_d = typeof ng_jhipster_1.JhiEventManager !== \"undefined\" && ng_jhipster_1.JhiEventManager) === \"function\" ? _d : Object, typeof (_e = typeof ng_jhipster_1.JhiParseLinks !== \"undefined\" && ng_jhipster_1.JhiParseLinks) === \"function\" ? _e : Object, typeof (_f = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" ? _f : Object, typeof (_g = typeof core_2.AccountService !== \"undefined\" && core_2.AccountService) === \"function\" ? _g : Object, typeof (_h = typeof manager_1.ManagerService !== \"undefined\" && manager_1.ManagerService) === \"function\" ? _h : Object])\r\n    ], OthersLeaveBalanceComponent);\r\n    return OthersLeaveBalanceComponent;\r\n}());\r\nexports.OthersLeaveBalanceComponent = OthersLeaveBalanceComponent;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\leave-balance\\others-leave-balance.component.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\leave-balance\\others-leave-balance.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ILeaveBalance } from 'app/shared/model/leave-balance.model';\r\nimport { IEmployee } from 'app/shared/model/employee.model';\r\nimport { Account, AccountService } from 'app/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { LeaveBalanceService } from 'app/entities/leave-balance/leave-balance.service';\r\nimport { EmployeeService } from 'app/entities/employee';\r\nimport { JhiAlertService, JhiEventManager, JhiParseLinks } from 'ng-jhipster';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { ILeaveApplication } from 'app/shared/model/leave-application.model';\r\nimport { ManagerService } from 'app/entities/manager';\r\nimport { IManager } from 'app/shared/model/manager.model';\r\nimport { IConstantsModel } from 'app/shared/model/constants-model';\r\nimport { YEARS } from 'app/shared';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'jhi-others-leave-balance',\r\n    templateUrl: './others-leave-balance.component.html',\r\n    styles: []\r\n})\r\nexport class OthersLeaveBalanceComponent implements OnInit {\r\n    leaveBalances: ILeaveBalance[];\r\n    employees: IEmployee[];\r\n    currentAccount: Account;\r\n    eventSubscriber: Subscription;\r\n    currentSearch: string;\r\n    account: Account;\r\n    currentEmployee: IEmployee;\r\n    employeesUnderSupervisor: IManager[];\r\n\r\n    years: IConstantsModel[] = YEARS();\r\n    employee: IEmployee;\r\n\r\n    fromDate: {\r\n        year: number;\r\n    } = { year: new Date().getFullYear() };\r\n\r\n    constructor(\r\n        protected leaveBalanceService: LeaveBalanceService,\r\n        protected employeeService: EmployeeService,\r\n        protected jhiAlertService: JhiAlertService,\r\n        protected eventManager: JhiEventManager,\r\n        protected parseLinks: JhiParseLinks,\r\n        protected activatedRoute: ActivatedRoute,\r\n        protected accountService: AccountService,\r\n        protected managerService: ManagerService\r\n    ) {\r\n        this.leaveBalances = [];\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.leaveBalances = [];\r\n        this.accountService.identity().then(account => {\r\n            this.currentAccount = account;\r\n            if (this.accountService.hasAnyAuthority(['ROLE_ADMIN']) || this.accountService.hasAnyAuthority(['ROLE_LEAVE_ADMIN'])) {\r\n                this.employeeService\r\n                    .query()\r\n                    .pipe(\r\n                        filter((mayBeOk: HttpResponse<IEmployee[]>) => mayBeOk.ok),\r\n                        map((response: HttpResponse<IEmployee[]>) => response.body)\r\n                    )\r\n                    .subscribe((res: IEmployee[]) => (this.employees = res), (res: HttpErrorResponse) => this.onError(res.message));\r\n            } else {\r\n                this.employeeService\r\n                    .query({\r\n                        'employeeId.equals': this.currentAccount.login\r\n                    })\r\n                    .subscribe(\r\n                        (res: HttpResponse<IEmployee[]>) => {\r\n                            this.currentEmployee = res.body[0];\r\n                            this.managerService\r\n                                .query({\r\n                                    'employeeId.equals': this.currentEmployee.id\r\n                                })\r\n                                .subscribe(\r\n                                    (res: HttpResponse<IManager[]>) => {\r\n                                        this.employeesUnderSupervisor = res.body;\r\n                                        const map: string = this.employeesUnderSupervisor.map(val => val.parentEmployeeId).join(',');\r\n                                        this.employeeService\r\n                                            .query({\r\n                                                'id.in': [map]\r\n                                            })\r\n                                            .subscribe(\r\n                                                (res: HttpResponse<IEmployee[]>) => (this.employees = res.body),\r\n                                                (res: HttpErrorResponse) => this.onError(res.message)\r\n                                            );\r\n                                    },\r\n                                    (res: HttpErrorResponse) => this.onError(res.message)\r\n                                );\r\n                        },\r\n                        (res: HttpErrorResponse) => this.onError(res.message)\r\n                    );\r\n            }\r\n        });\r\n    }\r\n\r\n    search() {\r\n        if (this.accountService.hasAnyAuthority(['ROLE_ADMIN']) || this.accountService.hasAnyAuthority(['ROLE_LEAVE_ADMIN'])) {\r\n            if (this.fromDate.year && this.employee) {\r\n                this.getLeaveBalance(this.employee.employeeId, this.fromDate.year);\r\n            } else {\r\n                this.onError('Invalid input');\r\n            }\r\n        } else {\r\n            if (this.fromDate.year && this.employee) {\r\n                this.employeeService\r\n                    .query({\r\n                        'employeeId.equals': this.employee.employeeId\r\n                    })\r\n                    .subscribe(\r\n                        (res: HttpResponse<IEmployee[]>) => {\r\n                            this.currentEmployee = res.body[0];\r\n                            this.managerService\r\n                                .query({\r\n                                    'parentEmployeeId.equals': this.currentEmployee.id\r\n                                })\r\n                                .subscribe(\r\n                                    (response: HttpResponse<IManager[]>) => {\r\n                                        this.getLeaveBalance(this.currentEmployee.employeeId, this.fromDate.year);\r\n                                    },\r\n                                    (response: HttpErrorResponse) => this.onError(response.message)\r\n                                );\r\n                        },\r\n                        (res: HttpErrorResponse) => this.onError(res.message)\r\n                    );\r\n            } else {\r\n                this.onError('Invalid input');\r\n            }\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this.currentSearch = '';\r\n    }\r\n\r\n    getLeaveBalance(employeeId: string, year: number) {\r\n        this.leaveBalanceService\r\n            .find(employeeId, year)\r\n            .subscribe(\r\n                (res: HttpResponse<ILeaveBalance[]>) => this.constructLeaveBalance(res.body, res.headers),\r\n                (res: HttpErrorResponse) => this.onError(res.message)\r\n            );\r\n    }\r\n\r\n    protected constructLeaveBalance(data: ILeaveBalance[], headers: HttpHeaders) {\r\n        this.leaveBalances = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.leaveBalances.push(data[i]);\r\n        }\r\n    }\r\n\r\n    trackId(index: number, item: ILeaveApplication) {\r\n        return item.id;\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.jhiAlertService.error(errorMessage, null, null);\r\n    }\r\n\r\n    trackEmployeeById(index: number, item: IEmployee) {\r\n        return item.id;\r\n    }\r\n\r\n    trackYearId(index: number, item: IConstantsModel) {\r\n        return item.id;\r\n    }\r\n\r\n    generateReport() {\r\n        if (this.fromDate.year && this.employee) {\r\n            this.leaveBalanceService.generateReportByFromDateAndToDateAndEmployeeId(this.fromDate.year, this.employee.employeeId);\r\n        } else if (this.fromDate.year) {\r\n            if (this.accountService.hasAnyAuthority(['ROLE_ADMIN', 'ROLE_LEAVE_ADMIN'])) {\r\n                this.leaveBalanceService.generateReportByFromDateAndToDate(this.fromDate.year);\r\n            } else {\r\n                this.onError('Please fill up all the required information');\r\n            }\r\n        } else {\r\n            this.onError('Invalid input');\r\n        }\r\n    }\r\n}\r\n"]}]}