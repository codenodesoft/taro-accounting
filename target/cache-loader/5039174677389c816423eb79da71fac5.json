{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\stock-in-process\\stock-in-process.service.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\stock-in-process\\stock-in-process.service.ts","mtime":1625565387852},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar moment = require(\"moment\");\r\nvar input_constants_1 = require(\"app/shared/constants/input.constants\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar shared_1 = require(\"app/shared\");\r\nvar StockInProcessService = /** @class */ (function () {\r\n    function StockInProcessService(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/stock-in-processes';\r\n        this.resourceSearchUrl = app_constants_1.SERVER_API_URL + 'api/_search/stock-in-processes';\r\n    }\r\n    StockInProcessService.prototype.create = function (stockInProcess) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(stockInProcess);\r\n        return this.http\r\n            .post(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    StockInProcessService.prototype.update = function (stockInProcess) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(stockInProcess);\r\n        return this.http\r\n            .put(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    StockInProcessService.prototype.find = function (id) {\r\n        var _this = this;\r\n        return this.http\r\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    StockInProcessService.prototype.query = function (req) {\r\n        var _this = this;\r\n        var options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\r\n    };\r\n    StockInProcessService.prototype.delete = function (id) {\r\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\r\n    };\r\n    StockInProcessService.prototype.search = function (req) {\r\n        var _this = this;\r\n        var options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceSearchUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\r\n    };\r\n    StockInProcessService.prototype.convertDateFromClient = function (stockInProcess) {\r\n        var copy = Object.assign({}, stockInProcess, {\r\n            mfgDate: stockInProcess.mfgDate != null && stockInProcess.mfgDate.isValid() ? stockInProcess.mfgDate.format(input_constants_1.DATE_FORMAT) : null,\r\n            expiryDate: stockInProcess.expiryDate != null && stockInProcess.expiryDate.isValid()\r\n                ? stockInProcess.expiryDate.format(input_constants_1.DATE_FORMAT)\r\n                : null,\r\n            processStartedOn: stockInProcess.processStartedOn != null && stockInProcess.processStartedOn.isValid()\r\n                ? stockInProcess.processStartedOn.toJSON()\r\n                : null,\r\n            stockInDate: stockInProcess.stockInDate != null && stockInProcess.stockInDate.isValid() ? stockInProcess.stockInDate.toJSON() : null\r\n        });\r\n        return copy;\r\n    };\r\n    StockInProcessService.prototype.convertDateFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.mfgDate = res.body.mfgDate != null ? moment(res.body.mfgDate) : null;\r\n            res.body.expiryDate = res.body.expiryDate != null ? moment(res.body.expiryDate) : null;\r\n            res.body.processStartedOn = res.body.processStartedOn != null ? moment(res.body.processStartedOn) : null;\r\n            res.body.stockInDate = res.body.stockInDate != null ? moment(res.body.stockInDate) : null;\r\n        }\r\n        return res;\r\n    };\r\n    StockInProcessService.prototype.convertDateArrayFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.forEach(function (stockInProcess) {\r\n                stockInProcess.mfgDate = stockInProcess.mfgDate != null ? moment(stockInProcess.mfgDate) : null;\r\n                stockInProcess.expiryDate = stockInProcess.expiryDate != null ? moment(stockInProcess.expiryDate) : null;\r\n                stockInProcess.processStartedOn = stockInProcess.processStartedOn != null ? moment(stockInProcess.processStartedOn) : null;\r\n                stockInProcess.stockInDate = stockInProcess.stockInDate != null ? moment(stockInProcess.stockInDate) : null;\r\n            });\r\n        }\r\n        return res;\r\n    };\r\n    var _a;\r\n    StockInProcessService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], StockInProcessService);\r\n    return StockInProcessService;\r\n}());\r\nexports.StockInProcessService = StockInProcessService;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\stock-in-process\\stock-in-process.service.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\stock-in-process\\stock-in-process.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared';\r\nimport { IStockInProcess } from 'app/shared/model/stock-in-process.model';\r\n\r\ntype EntityResponseType = HttpResponse<IStockInProcess>;\r\ntype EntityArrayResponseType = HttpResponse<IStockInProcess[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StockInProcessService {\r\n    public resourceUrl = SERVER_API_URL + 'api/stock-in-processes';\r\n    public resourceSearchUrl = SERVER_API_URL + 'api/_search/stock-in-processes';\r\n\r\n    constructor(protected http: HttpClient) {}\r\n\r\n    create(stockInProcess: IStockInProcess): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(stockInProcess);\r\n        return this.http\r\n            .post<IStockInProcess>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    update(stockInProcess: IStockInProcess): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(stockInProcess);\r\n        return this.http\r\n            .put<IStockInProcess>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    find(id: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<IStockInProcess>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<IStockInProcess[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n    }\r\n\r\n    delete(id: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n    }\r\n\r\n    search(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<IStockInProcess[]>(this.resourceSearchUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n    }\r\n\r\n    protected convertDateFromClient(stockInProcess: IStockInProcess): IStockInProcess {\r\n        const copy: IStockInProcess = Object.assign({}, stockInProcess, {\r\n            mfgDate: stockInProcess.mfgDate != null && stockInProcess.mfgDate.isValid() ? stockInProcess.mfgDate.format(DATE_FORMAT) : null,\r\n            expiryDate:\r\n                stockInProcess.expiryDate != null && stockInProcess.expiryDate.isValid()\r\n                    ? stockInProcess.expiryDate.format(DATE_FORMAT)\r\n                    : null,\r\n            processStartedOn:\r\n                stockInProcess.processStartedOn != null && stockInProcess.processStartedOn.isValid()\r\n                    ? stockInProcess.processStartedOn.toJSON()\r\n                    : null,\r\n            stockInDate:\r\n                stockInProcess.stockInDate != null && stockInProcess.stockInDate.isValid() ? stockInProcess.stockInDate.toJSON() : null\r\n        });\r\n        return copy;\r\n    }\r\n\r\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.mfgDate = res.body.mfgDate != null ? moment(res.body.mfgDate) : null;\r\n            res.body.expiryDate = res.body.expiryDate != null ? moment(res.body.expiryDate) : null;\r\n            res.body.processStartedOn = res.body.processStartedOn != null ? moment(res.body.processStartedOn) : null;\r\n            res.body.stockInDate = res.body.stockInDate != null ? moment(res.body.stockInDate) : null;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((stockInProcess: IStockInProcess) => {\r\n                stockInProcess.mfgDate = stockInProcess.mfgDate != null ? moment(stockInProcess.mfgDate) : null;\r\n                stockInProcess.expiryDate = stockInProcess.expiryDate != null ? moment(stockInProcess.expiryDate) : null;\r\n                stockInProcess.processStartedOn = stockInProcess.processStartedOn != null ? moment(stockInProcess.processStartedOn) : null;\r\n                stockInProcess.stockInDate = stockInProcess.stockInDate != null ? moment(stockInProcess.stockInDate) : null;\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"]}]}