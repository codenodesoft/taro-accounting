{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\dt-transaction-extended\\general-ledger-report.component.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\dt-transaction-extended\\general-ledger-report.component.ts","mtime":1625565386932},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar mst_account_extended_1 = require(\"app/entities/mst-account-extended\");\r\nvar dt_transaction_extended_service_1 = require(\"app/entities/dt-transaction-extended/dt-transaction-extended.service\");\r\nvar ng_bootstrap_1 = require(\"@ng-bootstrap/ng-bootstrap\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar financial_account_year_extended_1 = require(\"app/entities/financial-account-year-extended\");\r\nvar financial_account_year_model_1 = require(\"app/shared/model/financial-account-year.model\");\r\nvar moment = require(\"moment\");\r\nvar GeneralLedgerReportComponent = /** @class */ (function () {\r\n    function GeneralLedgerReportComponent(mstAccountExtendedService, dtTransactionService, financialAccountYearService) {\r\n        var _this = this;\r\n        this.mstAccountExtendedService = mstAccountExtendedService;\r\n        this.dtTransactionService = dtTransactionService;\r\n        this.financialAccountYearService = financialAccountYearService;\r\n        this.accountNameList = [];\r\n        this.focus$ = new rxjs_1.Subject();\r\n        this.click$ = new rxjs_1.Subject();\r\n        this.search = function (text$) {\r\n            var debouncedText$ = text$.pipe(operators_1.debounceTime(200), operators_1.distinctUntilChanged());\r\n            var clicksWithClosedPopup$ = _this.click$.pipe(operators_1.filter(function () { return !_this.instance.isPopupOpen(); }));\r\n            var inputFocus$ = _this.focus$;\r\n            return rxjs_1.merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(operators_1.map(function (term) {\r\n                return (term === ''\r\n                    ? _this.accountNameList\r\n                    : _this.accountNameList.filter(function (v) { return v.toLowerCase().indexOf(term.toLowerCase()) > -1; })).slice(0, 10);\r\n            }));\r\n        };\r\n    }\r\n    GeneralLedgerReportComponent.prototype.ngOnDestroy = function () { };\r\n    GeneralLedgerReportComponent.prototype.accountSelected = function () {\r\n        var selectedAccount = this.accountNameMapAccount[this.selectedAccountName];\r\n        this.accountId = selectedAccount.id;\r\n    };\r\n    GeneralLedgerReportComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.generalLedgerFetchType = dt_transaction_extended_service_1.GeneralLedgerFetchType.TRANSACTION_SPECIFIC;\r\n        this.financialAccountYearService\r\n            .query({\r\n            'status.equals': financial_account_year_model_1.FinancialYearStatus.ACTIVE\r\n        })\r\n            .subscribe(function (res) {\r\n            var financialAccountYear = res.body[0];\r\n            _this.fromDate = financialAccountYear.startDate;\r\n            _this.toDate = moment();\r\n        });\r\n        this.mstAccountExtendedService\r\n            .query({\r\n            size: 50000\r\n        })\r\n            .pipe(operators_1.filter(function (mayBeOk) { return mayBeOk.ok; }), operators_1.map(function (response) { return response.body; }))\r\n            .subscribe(function (res) {\r\n            _this.mstAccounts = [];\r\n            _this.accountNameList = [];\r\n            _this.accountNameMapAccount = {};\r\n            res.forEach(function (a) {\r\n                _this.mstAccounts.push(a);\r\n                var accountName = a.name + ' (' + a.groupName + ')';\r\n                _this.accountNameList.push(accountName);\r\n                _this.accountNameMapAccount[accountName] = a;\r\n            });\r\n        });\r\n    };\r\n    GeneralLedgerReportComponent.prototype.downloadReport = function () {\r\n        this.dtTransactionService.downloadGeneralLedgerReport(this.generalLedgerFetchType, this.accountId == null ? 9999 : this.accountId, this.fromDate, this.toDate);\r\n    };\r\n    var _a, _b, _c, _d;\r\n    tslib_1.__decorate([\r\n        core_1.ViewChild('instance'),\r\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof ng_bootstrap_1.NgbTypeahead !== \"undefined\" && ng_bootstrap_1.NgbTypeahead) === \"function\" ? _a : Object)\r\n    ], GeneralLedgerReportComponent.prototype, \"instance\", void 0);\r\n    GeneralLedgerReportComponent = tslib_1.__decorate([\r\n        core_1.Component({\r\n            selector: 'jh-general-ledger-report',\r\n            templateUrl: './general-ledger-report.component.html'\r\n        }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof mst_account_extended_1.MstAccountExtendedService !== \"undefined\" && mst_account_extended_1.MstAccountExtendedService) === \"function\" ? _b : Object, typeof (_c = typeof dt_transaction_extended_service_1.DtTransactionExtendedService !== \"undefined\" && dt_transaction_extended_service_1.DtTransactionExtendedService) === \"function\" ? _c : Object, typeof (_d = typeof financial_account_year_extended_1.FinancialAccountYearExtendedService !== \"undefined\" && financial_account_year_extended_1.FinancialAccountYearExtendedService) === \"function\" ? _d : Object])\r\n    ], GeneralLedgerReportComponent);\r\n    return GeneralLedgerReportComponent;\r\n}());\r\nexports.GeneralLedgerReportComponent = GeneralLedgerReportComponent;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\dt-transaction-extended\\general-ledger-report.component.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\dt-transaction-extended\\general-ledger-report.component.ts"],"names":[],"mappings":";;;AAAA,sCAAwE;AACxE,0EAA8E;AAC9E,wHAA4I;AAC5I,2DAA0D;AAC1D,6BAAkD;AAClD,4CAAiF;AAIjF,gGAAmG;AACnG,8FAA2G;AAC3G,+BAAiC;AAMjC;IAeI,sCACY,yBAAoD,EACpD,oBAAkD,EAClD,2BAAgE;QAH5E,iBAII;QAHQ,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,yBAAoB,GAApB,oBAAoB,CAA8B;QAClD,gCAA2B,GAA3B,2BAA2B,CAAqC;QAf5E,oBAAe,GAAa,EAAE,CAAC;QAS/B,WAAM,GAAG,IAAI,cAAO,EAAU,CAAC;QAC/B,WAAM,GAAG,IAAI,cAAO,EAAU,CAAC;QAiD/B,WAAM,GAAG,UAAC,KAAyB;YAC/B,IAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAC7B,wBAAY,CAAC,GAAG,CAAC,EACjB,gCAAoB,EAAE,CACzB,CAAC;YACF,IAAM,sBAAsB,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAM,CAAC,cAAM,OAAA,CAAC,KAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,EAA5B,CAA4B,CAAC,CAAC,CAAC;YAC5F,IAAM,WAAW,GAAG,KAAI,CAAC,MAAM,CAAC;YAEhC,OAAO,YAAK,CAAC,cAAc,EAAE,WAAW,EAAE,sBAAsB,CAAC,CAAC,IAAI,CAClE,eAAG,CAAC,UAAA,IAAI;gBACJ,OAAA,CAAC,IAAI,KAAK,EAAE;oBACR,CAAC,CAAC,KAAI,CAAC,eAAe;oBACtB,CAAC,CAAC,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,EAAhD,CAAgD,CAAC,CACvF,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;YAHd,CAGc,CACjB,CACJ,CAAC;QACN,CAAC,CAAC;IA3DC,CAAC;IAEJ,kDAAW,GAAX,cAAqB,CAAC;IAEtB,sDAAe,GAAf;QACI,IAAM,eAAe,GAAgB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC1F,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC,EAAE,CAAC;IACxC,CAAC;IAED,+CAAQ,GAAR;QAAA,iBAgCC;QA/BG,IAAI,CAAC,sBAAsB,GAAG,wDAAsB,CAAC,oBAAoB,CAAC;QAE1E,IAAI,CAAC,2BAA2B;aAC3B,KAAK,CAAC;YACH,eAAe,EAAE,kDAAmB,CAAC,MAAM;SAC9C,CAAC;aACD,SAAS,CAAC,UAAC,GAA0C;YAClD,IAAM,oBAAoB,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzC,KAAI,CAAC,QAAQ,GAAG,oBAAoB,CAAC,SAAS,CAAC;YAC/C,KAAI,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,yBAAyB;aACzB,KAAK,CAAC;YACH,IAAI,EAAE,KAAK;SACd,CAAC;aACD,IAAI,CACD,kBAAM,CAAC,UAAC,OAAoC,IAAK,OAAA,OAAO,CAAC,EAAE,EAAV,CAAU,CAAC,EAC5D,eAAG,CAAC,UAAC,QAAqC,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAb,CAAa,CAAC,CAChE;aACA,SAAS,CAAC,UAAC,GAAkB;YAC1B,KAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,KAAI,CAAC,eAAe,GAAG,EAAE,CAAC;YAC1B,KAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;YAChC,GAAG,CAAC,OAAO,CAAC,UAAC,CAAc;gBACvB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAM,WAAW,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC;gBACtD,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACvC,KAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACX,CAAC;IAoBD,qDAAc,GAAd;QACI,IAAI,CAAC,oBAAoB,CAAC,2BAA2B,CACjD,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAC9C,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,MAAM,CACd,CAAC;IACN,CAAC;;IA5EsB;QAAtB,gBAAS,CAAC,UAAU,CAAC;8DAAW,2BAAY,oBAAZ,2BAAY;kEAAC;IAXrC,4BAA4B;QAJxC,gBAAS,CAAC;YACP,QAAQ,EAAE,0BAA0B;YACpC,WAAW,EAAE,wCAAwC;SACxD,CAAC;qEAiByC,gDAAyB,oBAAzB,gDAAyB,oDAC9B,8DAA4B,oBAA5B,8DAA4B,oDACrB,qEAAmC,oBAAnC,qEAAmC;OAlBnE,4BAA4B,CAwFxC;IAAD,mCAAC;CAAA,AAxFD,IAwFC;AAxFY,oEAA4B","sourcesContent":["import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MstAccountExtendedService } from 'app/entities/mst-account-extended';\r\nimport { DtTransactionExtendedService, GeneralLedgerFetchType } from 'app/entities/dt-transaction-extended/dt-transaction-extended.service';\r\nimport { NgbTypeahead } from '@ng-bootstrap/ng-bootstrap';\r\nimport { merge, Observable, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';\r\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { IMstAccount, MstAccount } from 'app/shared/model/mst-account.model';\r\nimport { GroupType } from 'app/shared/model/system-group-map.model';\r\nimport { FinancialAccountYearExtendedService } from 'app/entities/financial-account-year-extended';\r\nimport { FinancialYearStatus, IFinancialAccountYear } from 'app/shared/model/financial-account-year.model';\r\nimport * as moment from 'moment';\r\n\r\n@Component({\r\n    selector: 'jh-general-ledger-report',\r\n    templateUrl: './general-ledger-report.component.html'\r\n})\r\nexport class GeneralLedgerReportComponent implements OnInit, OnDestroy {\r\n    generalLedgerFetchType: GeneralLedgerFetchType;\r\n    accountId: number;\r\n    accountNameList: string[] = [];\r\n    mstAccounts: MstAccount[];\r\n    accountNameMapAccount: any;\r\n    selectedAccountName: string;\r\n    fromDate: any;\r\n    toDate: any;\r\n    specification: any;\r\n\r\n    @ViewChild('instance') instance: NgbTypeahead;\r\n    focus$ = new Subject<string>();\r\n    click$ = new Subject<string>();\r\n\r\n    constructor(\r\n        private mstAccountExtendedService: MstAccountExtendedService,\r\n        private dtTransactionService: DtTransactionExtendedService,\r\n        private financialAccountYearService: FinancialAccountYearExtendedService\r\n    ) {}\r\n\r\n    ngOnDestroy(): void {}\r\n\r\n    accountSelected() {\r\n        const selectedAccount: IMstAccount = this.accountNameMapAccount[this.selectedAccountName];\r\n        this.accountId = selectedAccount.id;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.generalLedgerFetchType = GeneralLedgerFetchType.TRANSACTION_SPECIFIC;\r\n\r\n        this.financialAccountYearService\r\n            .query({\r\n                'status.equals': FinancialYearStatus.ACTIVE\r\n            })\r\n            .subscribe((res: HttpResponse<IFinancialAccountYear[]>) => {\r\n                const financialAccountYear = res.body[0];\r\n                this.fromDate = financialAccountYear.startDate;\r\n                this.toDate = moment();\r\n            });\r\n\r\n        this.mstAccountExtendedService\r\n            .query({\r\n                size: 50000\r\n            })\r\n            .pipe(\r\n                filter((mayBeOk: HttpResponse<IMstAccount[]>) => mayBeOk.ok),\r\n                map((response: HttpResponse<IMstAccount[]>) => response.body)\r\n            )\r\n            .subscribe((res: IMstAccount[]) => {\r\n                this.mstAccounts = [];\r\n                this.accountNameList = [];\r\n                this.accountNameMapAccount = {};\r\n                res.forEach((a: IMstAccount) => {\r\n                    this.mstAccounts.push(a);\r\n                    const accountName = a.name + ' (' + a.groupName + ')';\r\n                    this.accountNameList.push(accountName);\r\n                    this.accountNameMapAccount[accountName] = a;\r\n                });\r\n            });\r\n    }\r\n\r\n    search = (text$: Observable<string>) => {\r\n        const debouncedText$ = text$.pipe(\r\n            debounceTime(200),\r\n            distinctUntilChanged()\r\n        );\r\n        const clicksWithClosedPopup$ = this.click$.pipe(filter(() => !this.instance.isPopupOpen()));\r\n        const inputFocus$ = this.focus$;\r\n\r\n        return merge(debouncedText$, inputFocus$, clicksWithClosedPopup$).pipe(\r\n            map(term =>\r\n                (term === ''\r\n                    ? this.accountNameList\r\n                    : this.accountNameList.filter(v => v.toLowerCase().indexOf(term.toLowerCase()) > -1)\r\n                ).slice(0, 10)\r\n            )\r\n        );\r\n    };\r\n\r\n    downloadReport() {\r\n        this.dtTransactionService.downloadGeneralLedgerReport(\r\n            this.generalLedgerFetchType,\r\n            this.accountId == null ? 9999 : this.accountId,\r\n            this.fromDate,\r\n            this.toDate\r\n        );\r\n    }\r\n}\r\n"]}]}