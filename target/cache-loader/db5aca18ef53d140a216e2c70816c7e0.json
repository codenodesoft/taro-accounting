{"remainingRequest":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\attendance-extended\\my-attendance.component.ts","dependencies":[{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\attendance-extended\\my-attendance.component.ts","mtime":1625565386580},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar ng_jhipster_1 = require(\"ng-jhipster\");\r\nvar router_1 = require(\"@angular/router\");\r\nvar core_2 = require(\"app/core\");\r\nvar shared_1 = require(\"app/shared\");\r\nvar moment = require(\"moment\");\r\nvar attendance_extended_service_1 = require(\"app/entities/attendance-extended/attendance-extended.service\");\r\nvar employee_1 = require(\"app/entities/employee\");\r\nvar MyAttendanceComponent = /** @class */ (function () {\r\n    function MyAttendanceComponent(attendanceExtendedService, jhiAlertService, eventManager, parseLinks, activatedRoute, accountService, employeeService) {\r\n        this.attendanceExtendedService = attendanceExtendedService;\r\n        this.jhiAlertService = jhiAlertService;\r\n        this.eventManager = eventManager;\r\n        this.parseLinks = parseLinks;\r\n        this.activatedRoute = activatedRoute;\r\n        this.accountService = accountService;\r\n        this.employeeService = employeeService;\r\n        this.days = shared_1.DAYS;\r\n        this.months = shared_1.MONTHS;\r\n        this.years = shared_1.YEARS();\r\n        this.fromDate = { day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() };\r\n        this.toDate = { day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() };\r\n        this.attendances = [];\r\n        this.itemsPerPage = shared_1.ITEMS_PER_PAGE;\r\n        this.page = 0;\r\n        this.links = {\r\n            last: 0\r\n        };\r\n        this.predicate = 'id';\r\n        this.reverse = true;\r\n        this.currentSearch =\r\n            this.activatedRoute.snapshot && this.activatedRoute.snapshot.params['search']\r\n                ? this.activatedRoute.snapshot.params['search']\r\n                : '';\r\n    }\r\n    MyAttendanceComponent.prototype.loadAll = function () {\r\n        var _this = this;\r\n        if (this.fromDate.day && this.fromDate.month && this.fromDate.year && this.toDate.day && this.toDate.month && this.toDate.year) {\r\n            var from_1 = moment(new Date(this.fromDate.month + \"-\" + this.fromDate.day + \"-\" + this.fromDate.year));\r\n            var to_1 = moment(new Date(this.toDate.month + \"-\" + this.toDate.day + \"-\" + this.toDate.year));\r\n            if (from_1.isBefore(to_1.add(1))) {\r\n                this.employeeService\r\n                    .query({\r\n                    'employeeId.equals': this.currentAccount.login\r\n                })\r\n                    .subscribe(function (res) {\r\n                    _this.currentEmployee = res.body[0];\r\n                    _this.attendanceExtendedService\r\n                        .query({\r\n                        page: _this.page,\r\n                        size: _this.itemsPerPage,\r\n                        sort: _this.sort(),\r\n                        'attendanceDate.greaterOrEqualThan': from_1.format(shared_1.DATE_FORMAT),\r\n                        'attendanceDate.lessOrEqualThan': to_1.format(shared_1.DATE_FORMAT),\r\n                        'employeeId.equals': _this.currentEmployee.id\r\n                    })\r\n                        .subscribe(function (res) { return _this.paginateAttendances(res.body, res.headers); }, function (res) { return _this.onError(res.message); });\r\n                }, function (res) { return _this.onError(res.message); });\r\n            }\r\n            else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        }\r\n        else {\r\n            this.onError('Invalid dates');\r\n        }\r\n    };\r\n    MyAttendanceComponent.prototype.reset = function () {\r\n        this.page = 0;\r\n        this.attendances = [];\r\n        this.loadAll();\r\n    };\r\n    MyAttendanceComponent.prototype.loadPage = function (page) {\r\n        this.page = page;\r\n        this.loadAll();\r\n    };\r\n    MyAttendanceComponent.prototype.clear = function () {\r\n        this.attendances = [];\r\n        this.links = {\r\n            last: 0\r\n        };\r\n        this.page = 0;\r\n        this.predicate = 'id';\r\n        this.reverse = true;\r\n        this.currentSearch = moment(new Date())\r\n            .add(-1, 'days')\r\n            .toString();\r\n        this.loadAll();\r\n    };\r\n    MyAttendanceComponent.prototype.search = function (query) {\r\n        if (!query) {\r\n            return this.clear();\r\n        }\r\n        this.attendances = [];\r\n        this.links = {\r\n            last: 0\r\n        };\r\n        this.page = 0;\r\n        this.predicate = 'id';\r\n        this.reverse = false;\r\n        this.currentSearch = query;\r\n        this.loadAll();\r\n    };\r\n    MyAttendanceComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.accountService.identity().then(function (account) {\r\n            _this.currentAccount = account;\r\n        });\r\n        this.registerChangeInAttendances();\r\n    };\r\n    MyAttendanceComponent.prototype.trackId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    MyAttendanceComponent.prototype.registerChangeInAttendances = function () {\r\n        var _this = this;\r\n        this.eventSubscriber = this.eventManager.subscribe('attendanceListModification', function (response) { return _this.reset(); });\r\n    };\r\n    MyAttendanceComponent.prototype.sort = function () {\r\n        var result = [this.predicate + ',' + (this.reverse ? 'asc' : 'desc')];\r\n        if (this.predicate !== 'id') {\r\n            result.push('id');\r\n        }\r\n        return result;\r\n    };\r\n    MyAttendanceComponent.prototype.paginateAttendances = function (data, headers) {\r\n        this.attendances = [];\r\n        this.links = this.parseLinks.parse(headers.get('link'));\r\n        this.totalItems = parseInt(headers.get('X-Total-Count'), 10);\r\n        for (var i = 0; i < data.length; i++) {\r\n            this.attendances.push(data[i]);\r\n        }\r\n    };\r\n    MyAttendanceComponent.prototype.onError = function (errorMessage) {\r\n        this.jhiAlertService.error(errorMessage, null, null);\r\n    };\r\n    MyAttendanceComponent.prototype.trackDayId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    MyAttendanceComponent.prototype.trackMonthId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    MyAttendanceComponent.prototype.trackYearId = function (index, item) {\r\n        return item.id;\r\n    };\r\n    MyAttendanceComponent.prototype.generateReport = function () {\r\n        if (this.fromDate.day && this.fromDate.month && this.fromDate.year && this.toDate.day && this.toDate.month && this.toDate.year) {\r\n            var from = moment(new Date(this.fromDate.month + \"-\" + this.fromDate.day + \"-\" + this.fromDate.year));\r\n            var to = moment(new Date(this.toDate.month + \"-\" + this.toDate.day + \"-\" + this.toDate.year));\r\n            if (from.isBefore(to.add(1))) {\r\n                this.attendanceExtendedService.generateReportByFromDateAndToDateAndCurrentLoggedInUser(from, to);\r\n            }\r\n            else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        }\r\n        else {\r\n            this.onError('Invalid input');\r\n        }\r\n    };\r\n    var _a, _b, _c, _d, _e, _f, _g;\r\n    MyAttendanceComponent = tslib_1.__decorate([\r\n        core_1.Component({\r\n            selector: 'jhi-my-attendance',\r\n            templateUrl: './my-attendance.component.html',\r\n            styles: []\r\n        }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof attendance_extended_service_1.AttendanceExtendedService !== \"undefined\" && attendance_extended_service_1.AttendanceExtendedService) === \"function\" ? _a : Object, typeof (_b = typeof ng_jhipster_1.JhiAlertService !== \"undefined\" && ng_jhipster_1.JhiAlertService) === \"function\" ? _b : Object, typeof (_c = typeof ng_jhipster_1.JhiEventManager !== \"undefined\" && ng_jhipster_1.JhiEventManager) === \"function\" ? _c : Object, typeof (_d = typeof ng_jhipster_1.JhiParseLinks !== \"undefined\" && ng_jhipster_1.JhiParseLinks) === \"function\" ? _d : Object, typeof (_e = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" ? _e : Object, typeof (_f = typeof core_2.AccountService !== \"undefined\" && core_2.AccountService) === \"function\" ? _f : Object, typeof (_g = typeof employee_1.EmployeeService !== \"undefined\" && employee_1.EmployeeService) === \"function\" ? _g : Object])\r\n    ], MyAttendanceComponent);\r\n    return MyAttendanceComponent;\r\n}());\r\nexports.MyAttendanceComponent = MyAttendanceComponent;\r\n",{"version":3,"file":"C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\attendance-extended\\my-attendance.component.ts","sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\node_modules\\tslint-loader\\index.js!C:\\Users\\hp\\Documents\\soptorshi-jhipster\\src\\main\\webapp\\app\\entities\\attendance-extended\\my-attendance.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { IAttendance } from 'app/shared/model/attendance.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { JhiAlertService, JhiEventManager, JhiParseLinks } from 'ng-jhipster';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Account, AccountService } from 'app/core';\r\nimport { DATE_FORMAT, DAYS, ITEMS_PER_PAGE, MONTHS, YEARS } from 'app/shared';\r\nimport { HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport * as moment from 'moment';\r\nimport { AttendanceExtendedService } from 'app/entities/attendance-extended/attendance-extended.service';\r\nimport { EmployeeService } from 'app/entities/employee';\r\nimport { IEmployee } from 'app/shared/model/employee.model';\r\nimport { IConstantsModel } from 'app/shared/model/constants-model';\r\n\r\n@Component({\r\n    selector: 'jhi-my-attendance',\r\n    templateUrl: './my-attendance.component.html',\r\n    styles: []\r\n})\r\nexport class MyAttendanceComponent implements OnInit {\r\n    attendances: IAttendance[];\r\n    currentAccount: Account;\r\n    eventSubscriber: Subscription;\r\n    itemsPerPage: number;\r\n    links: any;\r\n    page: any;\r\n    predicate: any;\r\n    reverse: any;\r\n    totalItems: number;\r\n    currentSearch: string;\r\n    currentEmployee: IEmployee;\r\n\r\n    days: IConstantsModel[] = DAYS;\r\n    months: IConstantsModel[] = MONTHS;\r\n    years: IConstantsModel[] = YEARS();\r\n\r\n    fromDate: {\r\n        day: number;\r\n        month: number;\r\n        year: number;\r\n    } = { day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() };\r\n\r\n    toDate: {\r\n        day: number;\r\n        month: number;\r\n        year: number;\r\n    } = { day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() };\r\n\r\n    constructor(\r\n        protected attendanceExtendedService: AttendanceExtendedService,\r\n        protected jhiAlertService: JhiAlertService,\r\n        protected eventManager: JhiEventManager,\r\n        protected parseLinks: JhiParseLinks,\r\n        protected activatedRoute: ActivatedRoute,\r\n        protected accountService: AccountService,\r\n        protected employeeService: EmployeeService\r\n    ) {\r\n        this.attendances = [];\r\n        this.itemsPerPage = ITEMS_PER_PAGE;\r\n        this.page = 0;\r\n        this.links = {\r\n            last: 0\r\n        };\r\n        this.predicate = 'id';\r\n        this.reverse = true;\r\n        this.currentSearch =\r\n            this.activatedRoute.snapshot && this.activatedRoute.snapshot.params['search']\r\n                ? this.activatedRoute.snapshot.params['search']\r\n                : '';\r\n    }\r\n\r\n    loadAll() {\r\n        if (this.fromDate.day && this.fromDate.month && this.fromDate.year && this.toDate.day && this.toDate.month && this.toDate.year) {\r\n            let from = moment(new Date(`${this.fromDate.month}-${this.fromDate.day}-${this.fromDate.year}`));\r\n            let to = moment(new Date(`${this.toDate.month}-${this.toDate.day}-${this.toDate.year}`));\r\n\r\n            if (from.isBefore(to.add(1))) {\r\n                this.employeeService\r\n                    .query({\r\n                        'employeeId.equals': this.currentAccount.login\r\n                    })\r\n                    .subscribe(\r\n                        (res: HttpResponse<IEmployee[]>) => {\r\n                            this.currentEmployee = res.body[0];\r\n                            this.attendanceExtendedService\r\n                                .query({\r\n                                    page: this.page,\r\n                                    size: this.itemsPerPage,\r\n                                    sort: this.sort(),\r\n                                    'attendanceDate.greaterOrEqualThan': from.format(DATE_FORMAT),\r\n                                    'attendanceDate.lessOrEqualThan': to.format(DATE_FORMAT),\r\n                                    'employeeId.equals': this.currentEmployee.id\r\n                                })\r\n                                .subscribe(\r\n                                    (res: HttpResponse<IAttendance[]>) => this.paginateAttendances(res.body, res.headers),\r\n                                    (res: HttpErrorResponse) => this.onError(res.message)\r\n                                );\r\n                        },\r\n                        (res: HttpErrorResponse) => this.onError(res.message)\r\n                    );\r\n            } else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        } else {\r\n            this.onError('Invalid dates');\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.page = 0;\r\n        this.attendances = [];\r\n        this.loadAll();\r\n    }\r\n\r\n    loadPage(page) {\r\n        this.page = page;\r\n        this.loadAll();\r\n    }\r\n\r\n    clear() {\r\n        this.attendances = [];\r\n        this.links = {\r\n            last: 0\r\n        };\r\n        this.page = 0;\r\n        this.predicate = 'id';\r\n        this.reverse = true;\r\n        this.currentSearch = moment(new Date())\r\n            .add(-1, 'days')\r\n            .toString();\r\n        this.loadAll();\r\n    }\r\n\r\n    search(query) {\r\n        if (!query) {\r\n            return this.clear();\r\n        }\r\n        this.attendances = [];\r\n        this.links = {\r\n            last: 0\r\n        };\r\n        this.page = 0;\r\n        this.predicate = 'id';\r\n        this.reverse = false;\r\n        this.currentSearch = query;\r\n        this.loadAll();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.accountService.identity().then(account => {\r\n            this.currentAccount = account;\r\n        });\r\n        this.registerChangeInAttendances();\r\n    }\r\n\r\n    trackId(index: number, item: IAttendance) {\r\n        return item.id;\r\n    }\r\n\r\n    registerChangeInAttendances() {\r\n        this.eventSubscriber = this.eventManager.subscribe('attendanceListModification', response => this.reset());\r\n    }\r\n\r\n    sort() {\r\n        const result = [this.predicate + ',' + (this.reverse ? 'asc' : 'desc')];\r\n        if (this.predicate !== 'id') {\r\n            result.push('id');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected paginateAttendances(data: IAttendance[], headers: HttpHeaders) {\r\n        this.attendances = [];\r\n        this.links = this.parseLinks.parse(headers.get('link'));\r\n        this.totalItems = parseInt(headers.get('X-Total-Count'), 10);\r\n        for (let i = 0; i < data.length; i++) {\r\n            this.attendances.push(data[i]);\r\n        }\r\n    }\r\n\r\n    protected onError(errorMessage: string) {\r\n        this.jhiAlertService.error(errorMessage, null, null);\r\n    }\r\n\r\n    trackDayId(index: number, item: IConstantsModel) {\r\n        return item.id;\r\n    }\r\n\r\n    trackMonthId(index: number, item: IConstantsModel) {\r\n        return item.id;\r\n    }\r\n\r\n    trackYearId(index: number, item: IConstantsModel) {\r\n        return item.id;\r\n    }\r\n\r\n    generateReport() {\r\n        if (this.fromDate.day && this.fromDate.month && this.fromDate.year && this.toDate.day && this.toDate.month && this.toDate.year) {\r\n            let from = moment(new Date(`${this.fromDate.month}-${this.fromDate.day}-${this.fromDate.year}`));\r\n            let to = moment(new Date(`${this.toDate.month}-${this.toDate.day}-${this.toDate.year}`));\r\n\r\n            if (from.isBefore(to.add(1))) {\r\n                this.attendanceExtendedService.generateReportByFromDateAndToDateAndCurrentLoggedInUser(from, to);\r\n            } else {\r\n                this.onError('Invalid dates');\r\n            }\r\n        } else {\r\n            this.onError('Invalid input');\r\n        }\r\n    }\r\n}\r\n"]}]}